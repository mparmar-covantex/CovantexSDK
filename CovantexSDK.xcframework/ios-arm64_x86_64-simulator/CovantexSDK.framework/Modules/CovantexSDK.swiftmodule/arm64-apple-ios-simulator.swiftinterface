// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CovantexSDK
import AVFAudio
import AVFoundation
import Alamofire
import Foundation
import KeychainAccess
import Mute
import ObjectMapper
import Swift
import SwiftyJSON
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.String {
  public var getName: Swift.String {
    get
  }
  public var getUUID: Swift.String {
    get
  }
  public func getUUID_andName() -> (uuid: Swift.String, name: Swift.String)
}
extension Swift.String {
  public func isNotEmpty() -> Swift.Bool
  public func randomStringWithLength(_ len: Swift.Int) -> Swift.String
  public var trimmed_trailingSpaces: Swift.String {
    get
  }
  public var trimmed_leadingSpaces: Swift.String {
    get
  }
  public func replace(_ target: Swift.String, withString: Swift.String) -> Swift.String
}
extension Swift.String {
  public func encodeString() -> Swift.String
  public func encodeString_ForParameters() -> Swift.String
}
extension Swift.String {
  public func numberOfOccurrences(_ string: Swift.String) -> Swift.Int
}
extension Swift.String {
  public func split(_ separator: Swift.String) -> [Swift.String]
}
public class ApiQuery {
  public init()
  public func top(_ value: Swift.Int) -> Self
  public func skip(_ value: Swift.Int) -> Self
  public func select(_ columns: Swift.String) -> Self
  public func withCount() -> Self
  public func extra(_ value: [Swift.String : Any]) -> Self
  public func orderBy(_ value: CovantexSDK.ApiQuery.OrderBy) -> Self
  public func filter(_ filter: CovantexSDK.ApiQuery.Filter) -> Self
  public func build() -> [Swift.String : Any]
  public enum OrderBy {
    public enum OrderType {
      case asc
      case desc
      public static func == (a: CovantexSDK.ApiQuery.OrderBy.OrderType, b: CovantexSDK.ApiQuery.OrderBy.OrderType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case by(_: Swift.String, _: CovantexSDK.ApiQuery.OrderBy.OrderType)
  }
  indirect public enum Filter {
    public enum ValueType {
      case string(_: Swift.String, isUuid: Swift.Bool = false, isDateTime: Swift.Bool = false)
      case int(_: Swift.Int)
      case double(_: Swift.Double)
      case bool(_: Swift.Bool)
    }
    case equal(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType, allowBlank: Swift.Bool = false)
    case notEqual(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType)
    case isNull(_: Swift.String)
    case isNotNull(_: Swift.String)
    public enum ValueType_ {
      case dateTime(_: Swift.String)
      case int(_: Swift.Int)
      case double(_: Swift.Double)
    }
    case greater(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType_)
    case greaterOrEqual(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType_)
    case less(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType_)
    case lessOrEqual(_: Swift.String, _: CovantexSDK.ApiQuery.Filter.ValueType_)
    case and(_: [CovantexSDK.ApiQuery.Filter])
    case or(_: [CovantexSDK.ApiQuery.Filter])
    case not(_: CovantexSDK.ApiQuery.Filter)
    case contains(_: Swift.String, _: Swift.String, allowBlank: Swift.Bool = false)
    case startsWith(_: Swift.String, _: Swift.String, allowBlank: Swift.Bool = false)
    case endsWith(_: Swift.String, _: Swift.String, allowBlank: Swift.Bool = false)
    case second(_: Swift.String, _: Swift.Int)
    case minute(_: Swift.String, _: Swift.Int)
    case hour(_: Swift.String, _: Swift.Int)
    case day(_: Swift.String, _: Swift.Int)
    case month(_: Swift.String, _: Swift.Int)
    case year(_: Swift.String, _: Swift.Int)
    case between(_: Swift.String, _: Swift.String, _: Swift.String)
    case isTrue(_: Swift.String)
    case isFalse(_: Swift.String)
  }
  @objc deinit
}
extension Swift.Optional where Wrapped == CovantexSDK.ApiQuery {
  public func build() -> [Swift.String : Any]
}
public struct RegistrationEventObjectDto : ObjectMapper.Mappable {
  public var roles: [Swift.String]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class InternetReachability {
  public typealias NetworkReachable = (CovantexSDK.InternetReachability) -> ()
  public typealias NetworkUnreachable = (CovantexSDK.InternetReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: CovantexSDK.InternetReachability.NetworkStatus, b: CovantexSDK.InternetReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: CovantexSDK.InternetReachability.Connection
    public static func == (a: CovantexSDK.InternetReachability.Connection, b: CovantexSDK.InternetReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: CovantexSDK.InternetReachability.NetworkReachable?
  public var whenUnreachable: CovantexSDK.InternetReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: CovantexSDK.InternetReachability.Connection {
    get
  }
  public var connection: CovantexSDK.InternetReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension CovantexSDK.InternetReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct MhdHistoryDto : ObjectMapper.Mappable, Swift.Codable {
  public var disease: CovantexSDK.MhdHistoryDto.Disease?
  public var relatives: [CovantexSDK.MhdHistoryDto.Relatives]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum Disease : Swift.String, Swift.Codable {
    case IschemicHeartDisease
    case Diabetes
    case Lung
    case Cancer
    case Stroke
    case Hypertension
    case Hepatitis
    case Other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Relatives : Swift.String, Swift.Codable {
    case Father
    case Mother
    case Aunt
    case Uncle
    case Grandmother
    case Grandfather
    case Niece
    case Nephew
    case Brother
    case Sister
    case Child
    case Selff
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SecurityQuestionDto : ObjectMapper.Mappable, Swift.Codable {
  public var answer: Swift.String?
  public var question: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ZipcodesService {
  public static let shared: CovantexSDK.ZipcodesService
  public func url(_ baseUrl: CovantexSDK.ZipcodesService.baseUrl) -> Swift.String
  public enum baseUrl {
    case countries
    case regions
    case zipCodes
    public static func == (a: CovantexSDK.ZipcodesService.baseUrl, b: CovantexSDK.ZipcodesService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getCountries(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CountryDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getRegionsByCountry(country: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegionDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getZipCodesByAddress(number: Swift.String, street: Swift.String, city: Swift.String, country: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ZipCodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getZipCodesById(country: Swift.String, id: Swift.String = "", _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ZipCodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct UserDeviceDto : Swift.Codable, ObjectMapper.Mappable {
  public var deviceAdvertisingId: Swift.String?
  public var createdDate: Foundation.Date?
  public var isDeleted: Swift.Bool
  public var voipToken: Swift.String?
  public var deviceToken: Swift.String?
  public var deviceTypeId: CovantexSDK.UserDeviceDto.DeviceTypeId?
  public var deviceStatus: CovantexSDK.UserDeviceDto.UserDeviceStatus?
  public var userId: Swift.String?
  public var userDeviceId: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var deviceName: Swift.String?
  public var deviceOS: Swift.String?
  public var deviceTimeZone: Swift.String?
  public var deviceData: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum DeviceTypeId : Swift.String, Swift.Codable {
    case Android
    case IOS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UserDeviceStatus : Swift.String, Swift.Codable {
    case Active
    case Inactive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public mutating func setDeviceData(_ deviceData: CovantexSDK.DeviceDataDto)
  public mutating func generateDeviceData(_ deviceData: CovantexSDK.DeviceDataDto) -> Swift.String
  public init(deviceToken: Swift.String, voipToken: Swift.String, loggedInUserId: Swift.String, appLanguage: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DeviceDataDto : Swift.Codable, ObjectMapper.Mappable {
  public var appName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var appIdentifier: Swift.String?
  public var appLanguage: Swift.String?
  public var apiKey: Swift.String?
  public var apiUserRole: Swift.String?
  public var apiUrl: Swift.String?
  public var apiEnv: Swift.String?
  public var permissionCamera: Swift.Bool?
  public var permissionMic: Swift.Bool?
  public var permissionNotification: Swift.Bool?
  public var deviceName: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceTimeZone: Swift.String?
  public var deviceLanguage: Swift.String?
  public var deviceRingMode: CovantexSDK.DeviceDataDto.DeviceRingMode?
  public var deviceAudioVolume: Swift.String?
  public var processor: Swift.String?
  public var cpuType: Swift.String?
  public var cores: Swift.String?
  public var cpuFrequency: Swift.String?
  public var supportedABIs: Swift.String?
  public var osName: Swift.String?
  public var osVersion: Swift.String?
  public var internet: Swift.String?
  public var orientation: Swift.String?
  public var resolution: Swift.String?
  public var density: Swift.Double?
  public var wifiStandard: Swift.String?
  public var bluetoothVersion: Swift.String?
  public var googlePlayService: Swift.String?
  public var ram: Swift.String?
  public var volumeTotalCapacity: Swift.String?
  public var volumeAvailableCapacity: Swift.String?
  public var batteryLevel: Swift.Int?
  public var thermalState: Swift.String?
  public var lowPowerMode: Swift.Bool?
  public var isBatteryMonitoringEnabled: Swift.Bool?
  public var batteryDescription: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum DeviceRingMode : Swift.String, Swift.Codable {
    case Normal
    case Silent
    case Vibrate
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class CaregiverOptionDto : ObjectMapper.Mappable {
  public var age: Swift.Int?
  public var caregiverId: Swift.String?
  public var city: Swift.String?
  public var firstName: Swift.String?
  public var gender: Swift.String?
  public var lastName: Swift.String?
  public var fullName: Swift.String?
  public var memberConsultFee: Swift.Double?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public var professionalTitle: Swift.String?
  public var profileImageId: Swift.String?
  public var services: Swift.String?
  public var slots: [Foundation.Date]?
  public var specialties: Swift.String?
  public var state: Swift.String?
  public var zipCode: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public struct TermsAndConditionsPatientDto : ObjectMapper.Mappable, Swift.Codable {
  public var currentPhone: Swift.String?
  public var dateCompleting: Foundation.Date?
  public var personCompleting: Swift.String?
  public var relationPersonComplete: Swift.String?
  public var statementId: Swift.String?
  public var patientId: Swift.String?
  public var termsAndConditionsId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorDto : ObjectMapper.Mappable {
  public var errorCode: Swift.String?
  public var exceptionType: Swift.String?
  public var field: Swift.String?
  public var message: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PickListValueTranslationDto : ObjectMapper.Mappable {
  public var _id: Swift.String?
  public var value: Swift.String?
  public var lang: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct LinkDto : ObjectMapper.Mappable {
  public var shortLink: Swift.String?
  public var originalLink: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class StringsService {
  public func url(_ baseUrl: CovantexSDK.StringsService.baseUrl) -> Swift.String
  public enum baseUrl {
    case translations
    case pickListGetAllByLang
    public static func == (a: CovantexSDK.StringsService.baseUrl, b: CovantexSDK.StringsService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getTranslations(for lang: Swift.String = "en", onSuccess: @escaping ((Foundation.NSDictionary) -> Swift.Void), onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPickList(forLanguage lang: Swift.String = "en", onSuccess: @escaping CovantexSDK.onSuccess_ArrayHandler<CovantexSDK.PickListDto>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct VitalReportRequestDto : ObjectMapper.Mappable {
  public var createdBy: Swift.String?
  public var createdDate: Foundation.Date?
  public var from: Foundation.Date?
  public var funcType: CovantexSDK.VitalReportRequestDto.FuncType?
  public var name: Swift.String?
  public var patientId: Swift.String?
  public var period: CovantexSDK.VitalReportRequestDto.Period?
  public var reportId: Swift.String?
  public var status: CovantexSDK.VitalReportRequestDto.Status?
  public var statusTimestamp: Foundation.Date?
  public var to: Foundation.Date?
  public var types: [Swift.String]?
  public var vitalReportRequestId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum FuncType : Swift.String {
    case Min
    case Max
    case Avg
    public static func getAll() -> [Swift.String]
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Period : Swift.String {
    case Daily
    case Weekly
    case Monthly
    case Yearly
    public static func getAll() -> [Swift.String]
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case Created
    case Processing
    case Success
    case Failure
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct MhdNoteDto : ObjectMapper.Mappable, Swift.Codable {
  public var createdDate: Foundation.Date?
  public var text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class PlanPatientFeesDto : ObjectMapper.Mappable, Swift.Codable {
  public var consultFee: Swift.Double?
  public var discountedConsultFee: Swift.Double?
  public var patientCouponId: Swift.String?
  public var patientId: Swift.String?
  public var planId: Swift.String?
  public var pmpmFee: Swift.Double?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct TreatedConditionDto : ObjectMapper.Mappable, Swift.Codable {
  public var disease: Swift.String?
  public var physicianCity: Swift.String?
  public var physicianCountry: Swift.String?
  public var physicianName: Swift.String?
  public var physicianPhone: Swift.String?
  public var physicianState: Swift.String?
  public var physicianZipCode: Swift.String?
  public var treatmentDate: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.TreatedConditionDto {
  public func getAddressWithZipcode_State_City() -> Swift.String
}
public class PackageDto : ObjectMapper.Mappable {
  public var amount: Swift.Double?
  public var coupons: [CovantexSDK.PackageCouponDto]?
  public var description: Swift.String?
  public var fileId: Swift.String?
  public var name: Swift.String?
  public var normalPrice: Swift.Double?
  public var packageId: Swift.String?
  public var plans: [CovantexSDK.PackagePlanDto]?
  public var public_: Swift.Bool?
  public var resellerId: Swift.String?
  public var statusId: CovantexSDK.PackageDto.StatusId?
  public var termsAndConditions: Swift.String?
  public var unlimitedDuration: Swift.Bool?
  public var durationDays: Swift.Int?
  public var applyChangesToSubscribers: CovantexSDK.PackageDto.EApplyChangesToSubscribers?
  public var resellerDto: CovantexSDK.ResellerDto?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum StatusId : Swift.String {
    case Active
    case Inactive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EApplyChangesToSubscribers : Swift.String {
    case ForNew
    case ForExisting
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public struct EncounterOrderFileDto : ObjectMapper.Mappable {
  public var createdBy: Swift.String?
  public var createdByName: Swift.String?
  public var createdDate: Foundation.Date?
  public var description: Swift.String?
  public var encounterOrderFileId: Swift.String?
  public var encounterOrderId: Swift.String?
  public var fileContentType: Swift.String?
  public var fileId: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileStoragePlace: CovantexSDK.EncounterOrderFileDto.FileStoragePlace?
  public var fileType: CovantexSDK.EncounterOrderFileDto.FileType?
  public var lastUpdatedBy: Swift.String?
  public var lastUpdatedByName: Swift.String?
  public var lastUpdatedDate: Foundation.Date?
  public var resellerServiceType: CovantexSDK.EncounterOrderFileDto.ResellerServiceType?
  public var status: CovantexSDK.EncounterOrderFileDto.Status?
  public var statusOn: Foundation.Date?
  public var storageFileName: Swift.String?
  public var url: Swift.String?
  public var videoLength: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum FileStoragePlace : Swift.String {
    case Local
    case S3
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FileType : Swift.String {
    case Image
    case Video
    case Audio
    case Unknown
    case Document
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ResellerServiceType : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case New
    case Rejected
    case Approved
    case Completed
    case Reviewed
    case Sent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct EventDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public var eventObject: Any?
  public var role: Swift.String?
  public var statementsToSign: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.EventDto {
  public func memberNeedToSignTermsAndConditions() -> Swift.Bool
  public func memberNeedToSignMedicalRelease() -> Swift.Bool
  public func memberNeedToConfirmMhd() -> Swift.Bool
  public func isWaitingForOneTimePassword() -> Swift.Bool
}
public struct CommunicationDto : ObjectMapper.Mappable {
  public var closedTimestamp: Foundation.Date?
  public var communicationId: Swift.String?
  public var communicationType: CovantexSDK.CommunicationDto.CommunicationType?
  public var userFromCommunicationParticipantId: Swift.String?
  public var encounterId: Swift.String?
  public var lengthOfMeetingSec: Swift.Int?
  public var participants: [CovantexSDK.ParticipantHistoryDto]?
  public var phoneNumberTo: Swift.String?
  public var providerType: CovantexSDK.CommunicationDto.ProviderType?
  public var startedTimestamp: Foundation.Date?
  public var smsMessage: Swift.String?
  public var status: CovantexSDK.CommunicationDto.CommunicationStatus?
  public var timestamp: Foundation.Date?
  public var token: Swift.String?
  public var userFromId: Swift.String?
  public var userFromImageId: Swift.String?
  public var userFromName: Swift.String?
  public var userFromType: CovantexSDK.CommunicationDto.ParticipantType?
  public var userToId: Swift.String?
  public var userToImageId: Swift.String?
  public var userToName: Swift.String?
  public var userToType: CovantexSDK.CommunicationDto.ParticipantType?
  public var meetingId: Swift.String?
  public var tokenParticipantName: Swift.String?
  public var tokenParticipantUserId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public mutating func updateMeetingId(usingToken token: Swift.String?)
  public enum ParticipantType : Swift.String, Swift.Codable {
    case doctor
    case patient
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CommunicationType : Swift.String {
    case voice
    case video
    case sms
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ProviderType : Swift.String {
    case twilio
    case zoom
    case zego
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CommunicationStatus : Swift.String {
    case registered
    case created
    case active
    case inactive
    case closed
    case failed
    case completed
    case declined
    case noAnswer
    case success
    case shortCall
    case participantToUnreachable
    @available(*, deprecated, message: "Use 'declined' if env is not prod")
    case patientDeclined
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ParticipantHistoryDto : ObjectMapper.Mappable {
  public var name: Swift.String?
  public var communicationParticipantId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class SDKInternetManager {
  public static let shared: CovantexSDK.SDKInternetManager
  public func isReachable(_ completed: @escaping (_ isReachable: Swift.Bool) -> Swift.Void)
  public func onInternetChange(_ onChange: @escaping (CovantexSDK.InternetReachability.Connection) -> Swift.Void)
  @objc deinit
}
public class PickListDto : ObjectMapper.Mappable {
  public var _id: Swift.String?
  public var name: Swift.String?
  public var values: [CovantexSDK.PickListValueDto]?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class PatientPackageDto : ObjectMapper.Mappable {
  public var agreedTermsAndConditions: Swift.Bool?
  public var expiration: Foundation.Date?
  public var packageDescription: Swift.String?
  public var packageId: Swift.String?
  public var packageName: Swift.String?
  public var patientId: Swift.String?
  public var patientPackageId: Swift.String?
  public var paymentAuthorizationId: Swift.String?
  public var statusId: CovantexSDK.PatientPackageDto.StatusId?
  public var timestampAgreeTermsAndConditions: Foundation.Date?
  public var unlimitedDuration: Swift.Bool?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum StatusId : Swift.String {
    case Active
    case Inactive
    case Expired
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public class EnumDto : ObjectMapper.Mappable, Swift.Codable, Swift.Hashable, Swift.Equatable {
  public var type: Swift.String?
  public var values: [CovantexSDK.EnumValueDto]?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public static func == (left: CovantexSDK.EnumDto, right: CovantexSDK.EnumDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public struct Resource : ObjectMapper.Mappable, Swift.Codable {
  public var id: Swift.String?
  public var name: Swift.String?
  public var description: Swift.String?
  public var url: Swift.String?
  public var status: CovantexSDK.Resource.resourceStatus?
  public var info: [CovantexSDK.MaintenanceInfo]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum resourceStatus : Swift.String, Swift.Codable {
    case online
    case maintenance
    case offline
    case error
    case notFound
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.Resource {
  public func isMaintenanceRunning() -> Swift.Bool
}
public struct MaintenanceInfo : ObjectMapper.Mappable, Swift.Codable {
  public var sessionId: Swift.String?
  public var startTime: Foundation.Date?
  public var endTime: Foundation.Date?
  public var reason: Swift.String?
  public var alternative: [CovantexSDK.Resource]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PatientDto : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public static func == (left: CovantexSDK.PatientDto, right: CovantexSDK.PatientDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var isCareGiver: Swift.Bool
  public var CovidScreeningResults: Swift.String?
  public var arePaymentMethodsRequired: Swift.Bool?
  public var accessCode: Swift.String?
  public var accessCodeId: Swift.String?
  public var accessCodes: [Swift.String]?
  public var accessCodes_: [CovantexSDK.AccessCodesDto]?
  public var address: CovantexSDK.AddressDto?
  public var age: Swift.Int?
  public var bestContactNumberId: CovantexSDK.PatientDto.BestContactNumberId?
  public var clientGroupId: Swift.String?
  public var clientId: Swift.String?
  public var clientMemberId: Swift.String?
  public var coverageDescription: Swift.String?
  public var dateOfBirth: Swift.String?
  public var dependents: [Swift.String]?
  public var dob: Foundation.Date?
  public var driverLicenseBack: Swift.String?
  public var driverLicenseFront: Swift.String?
  public var driverLicenseNumber: Swift.String?
  public var driverLicenseState: Swift.String?
  public var email: Swift.String?
  public var employerId: Swift.String?
  public var ethnicityId: Swift.String?
  public var externalAccountId: Swift.String?
  public var externalData: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var fullName: Swift.String?
  public var genderId: Swift.String?
  public var hireDate: Foundation.Date?
  public var homePhone: Swift.String?
  public var id: Swift.String?
  public var iin: Swift.String?
  public var insuranceCompanies: [Swift.String]?
  public var insuranceProviderId: Swift.String?
  public var insurances: [CovantexSDK.PatientInsuranceCompanyDto]?
  public var ip: Swift.String?
  public var lastName: Swift.String?
  public var maritalStatusId: Swift.String?
  public var medicaid: Swift.String?
  public var medicalReleases: [CovantexSDK.MedicalReleaseDto]?
  public var medicare: Swift.String?
  public var memberAccessLevelId: CovantexSDK.PatientDto.MemberAccessLevelId?
  public var memberRoleId: CovantexSDK.PatientDto.MemberRoleId?
  public var memberSince: Foundation.Date?
  public var mhd: CovantexSDK.MhdDto?
  public var middleName: Swift.String?
  public var mobileAppSMSSent: Swift.Bool?
  public var mobilePhone: Swift.String?
  public var mobileVisited: Swift.String?
  public var occupationId: CovantexSDK.PatientDto.OccupationId?
  public var parentId: Swift.String?
  public var password: Swift.String?
  public var passwordResetNeeded: Swift.Bool?
  public var patientId: Swift.String?
  public var payerProfileDescription: Swift.String?
  public var paymentMethods: [Swift.String]?
  public var personId: Swift.String?
  public var pharmacyStoreId: Swift.String?
  public var phoneConfirmationRequired: Swift.Bool?
  public var plans: [Swift.String]?
  public var preferredCaregivers: [Swift.String]?
  public var preferredLanguage: Swift.String?
  public var primaryCarePhysicians: [Swift.String]?
  public var profileImageId: Swift.String?
  public var resellerId: Swift.String?
  public var resellerName: Swift.String?
  public var rxNumber: Swift.String?
  public var securityQuestions: [CovantexSDK.SecurityQuestionDto]?
  public var selfManaged: Swift.Bool?
  public var signatureImageId: Swift.String?
  public var skypeId: Swift.String?
  public var sponsoringOrganizationId: Swift.String?
  public var ssn: Swift.String?
  public var termsAndConditions: [CovantexSDK.TermsAndConditionsPatientDto]?
  public var timeZone: Swift.String?
  public var treatedConditions: [CovantexSDK.TreatedConditionDto]?
  public var unregisteredDependents: [Swift.String]?
  public var userName: Swift.String?
  public var userStatusId: CovantexSDK.PatientDto.UserStatusId?
  public var vmrConnectionSpeed: Swift.String?
  public var vmrID: Swift.String?
  public var vmrPIN: Swift.String?
  public var workEmail: Swift.String?
  public var workPhone: Swift.String?
  public var zoomUserId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum BestContactNumberId : Swift.String, Swift.Codable {
    case Mobile
    case Home
    case Work
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MemberAccessLevelId : Swift.String, Swift.Codable {
    case Full
    case Limited
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MemberRoleId : Swift.String, Swift.Codable {
    case Primary
    case Dependent
    case Spouse
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OccupationId : Swift.String, Swift.Codable {
    case FullTimeEmployed
    case PartTimeEmployed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UserStatusId : Swift.String, Swift.Codable {
    case Enabled
    case Disabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.PatientDto {
  public var name: Swift.String {
    get
  }
  public func isMaleGender() -> Swift.Bool?
  public func isFemaleGender() -> Swift.Bool?
  public func hasProfileImage() -> Swift.Bool
  public var bestContactNumber: Swift.String? {
    get
  }
}
public struct ResellerDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var alternativeNumber: Swift.String?
  public var caregiversTermsAndConditionsId: Swift.String?
  public var caregiverTimeSlotIntervalMinutes: Swift.Int?
  public var customerCareNumber: Swift.String?
  public var email: Swift.String?
  public var employers: Swift.Int?
  public var externalAccountId: Swift.String?
  public var faxNumber: Swift.String?
  public var friEnd: Swift.String?
  public var friStart: Swift.String?
  public var hoursOfOperation: Swift.String?
  public var largeLogoFileId: Swift.String?
  public var mainNumber: Swift.String?
  public var mon2FriEqual: Swift.Bool?
  public var monEnd: Swift.String?
  public var monStart: Swift.String?
  public var name: Swift.String?
  public var organizationId: Swift.String?
  public var organizationImageId: Swift.String?
  public var organizations: [CovantexSDK.OrganizationDto]?
  public var organizationTypeId: CovantexSDK.ResellerDto.OrganizationTypeId?
  public var patientsTermsAndConditionsId: Swift.String?
  public var primaryContact: CovantexSDK.UserProfileDto?
  public var resellerId: Swift.String?
  public var resellerServices: [CovantexSDK.ResellerServiceDto]?
  public var satEnd: Swift.String?
  public var satStart: Swift.String?
  public var smallLogoFileId: Swift.String?
  public var statements: [CovantexSDK.ResellerStatementDto]?
  public var sunEnd: Swift.String?
  public var sunStart: Swift.String?
  public var thuEnd: Swift.String?
  public var thuStart: Swift.String?
  public var tueEnd: Swift.String?
  public var tueStart: Swift.String?
  public var wedEnd: Swift.String?
  public var wedStart: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum OrganizationTypeId : Swift.String {
    case Client
    case Reseller
    case Hospital
    case Pharmacy
    case PhysicianPractice
    case ExtendedCareFacility
    case Employer
    case InsuranceCompany
    case Other
    case Store
    case Clinic
    case ProviderNetwork
    case CallCenter
    case Laboratory
    case DMESupplier
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct SignInDto : Swift.Codable, ObjectMapper.Mappable {
  public var login: Swift.String?
  public var loginToken: Swift.String?
  public var oneTimePassword: Swift.String?
  public var password: Swift.String?
  public var userId: Swift.String?
  public var userDevice: CovantexSDK.UserDeviceDto?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsultRequestUpdateDto : ObjectMapper.Mappable {
  public var caregiverAcknowledgementId: Swift.String?
  public var chosenCaregiverId: Swift.String?
  public var consultRequestId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class VendorsService {
  public static let shared: CovantexSDK.VendorsService
  public func url(_ baseUrl: CovantexSDK.VendorsService.baseUrl) -> Swift.String
  public enum baseUrl {
    case vendorMedicalItems
    public static func == (a: CovantexSDK.VendorsService.baseUrl, b: CovantexSDK.VendorsService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getVendorMedicalItems(_ apiQuery: CovantexSDK.ApiQuery, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VendorMedicalItemDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct EncounterRefillDto : ObjectMapper.Mappable {
  public var faxedEmailedOn: Foundation.Date?
  public var refillId: Swift.String?
  public var refillStatus: CovantexSDK.EncounterRefillDto.RefillStatus?
  public var requestedOn: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum RefillStatus : Swift.String {
    case Started
    case ReadyForSubmit
    case Submitted
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ResellerServiceDto : ObjectMapper.Mappable {
  public var allowAutogeneratedMembers: Swift.Bool?
  public var caregiverConsultFee: Swift.Double?
  public var cct1: Swift.Int?
  public var cct2: Swift.Int?
  public var cct3: Swift.Int?
  public var cct4: Swift.Int?
  public var diseaseStates: [Swift.String]?
  public var laboratories: [Swift.String]?
  public var mcat: Swift.Int?
  public var mcpt: Swift.Int?
  public var name: Swift.String?
  public var plans: [Swift.String]?
  public var providerNetworks: [Swift.String]?
  public var resellerId: Swift.String?
  public var resellerServiceId: Swift.String?
  public var serviceTypeId: CovantexSDK.ResellerServiceDto.ServiceTypeId?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum ServiceTypeId : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct AuthorizationCodeDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class InsuranceCompanyDto : ObjectMapper.Mappable {
  public var insuranceCompanyId: Swift.String?
  public var name: Swift.String?
  public var payerId: Swift.String?
  public var claimsNumber: Swift.String?
  public var mainNumber: Swift.String?
  public var customerCareNumber: Swift.String?
  public var alternativeNumber: Swift.String?
  public var operationHours: Swift.String?
  public var externalAccountId: Swift.String?
  public var faxNumber: Swift.String?
  public var pokitDocTradingPartnerId: Swift.String?
  public var pokitDocEligibilitySupport: Swift.Bool?
  public var pokitDocIsEnabled: Swift.Bool?
  public var pokitDokNpiForEligibilityRequired: Swift.String?
  public var changedAutomatically: Swift.Bool?
  public var lastUpdatedDate: Swift.String?
  public var address: Swift.String?
  public var country: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public struct XenditTokenCardInfoDto : ObjectMapper.Mappable {
  public var bank: Swift.String?
  public var country: Swift.String?
  public var countryCode: Swift.String?
  public var fingerprint: Swift.String?
  public var type: Swift.String?
  public var brand: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterNoteDto : ObjectMapper.Mappable {
  public var createdDate: Foundation.Date?
  public var encounterId: Swift.String?
  public var encounterNoteId: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var noteType: CovantexSDK.EncounterNoteDto.NoteType?
  public var role: Swift.String?
  public var text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum NoteType : Swift.String {
    case Regular
    case Resolution
    case Service
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct RegionDto : ObjectMapper.Mappable {
  public var regionKey: Swift.String?
  public var regionName: Swift.String?
  public var countryKey: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct BrandingDto : ObjectMapper.Mappable, Swift.Codable {
  public var advancedZipSearch: Swift.String?
  public var appName: Swift.String?
  public var brandLogoMobileUrl: Swift.String?
  public var brandLogoUrl: Swift.String?
  public var brandUrl: Swift.String?
  public var colorScheme: Swift.String?
  public var favicon: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DefaultCountryDto : ObjectMapper.Mappable, Swift.Codable {
  public var countryCode: Swift.String?
  public var countryForPhone: Swift.String?
  public var dateFormat: Swift.String?
  public var dateTimeFormat: Swift.String?
  public var timeFormat: Swift.String?
  public var timeFormatHHMM: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class EncounterOrderDto : ObjectMapper.Mappable {
  public var accessCode: Swift.String?
  public var auditMessage: Swift.String?
  public var bin: Swift.String?
  public var caregiverFirstName: Swift.String?
  public var caregiverId: Swift.String?
  public var caregiverLastName: Swift.String?
  public var caregiverNpi: Swift.String?
  public var cogs: Swift.Double?
  public var createdOn: Foundation.Date?
  public var description: Swift.String?
  public var encounterClosedOn: Foundation.Date?
  public var encounterId: Swift.String?
  public var encounterOrderId: Swift.String?
  public var encounterOrderType: Swift.String?
  public var encounterScheduledOn: Foundation.Date?
  public var encounterState: Swift.String?
  public var encounterStatus: CovantexSDK.EncounterOrderDto.EncounterStatus?
  public var exportedTo: Swift.String?
  public var exportStatusId: CovantexSDK.EncounterOrderDto.ExportStatusId?
  public var faxedEmailedOn: Foundation.Date?
  public var folder: Swift.String?
  public var insuranceCompanyName: Swift.String?
  public var insurancePayment: Swift.Double?
  public var medicalItems: [CovantexSDK.EncounterOrderMedicalItemDto]?
  public var memberId: Swift.String?
  public var net: Swift.Double?
  public var note: Swift.String?
  public var orderJson: Swift.String?
  public var orderKey: Swift.String?
  public var organizationId: Swift.String?
  public var organizationName: Swift.String?
  public var partnerName: Swift.String?
  public var patientAddress: CovantexSDK.AddressDto?
  public var patientAge: Swift.Int?
  public var patientDOB: Foundation.Date?
  public var patientFirstName: Swift.String?
  public var patientGender: Swift.String?
  public var patientId: Swift.String?
  public var patientInsuranceCompanyId: Swift.String?
  public var patientLastName: Swift.String?
  public var patientPhone: Swift.String?
  public var pcn: Swift.String?
  public var pDFFileId: Swift.String?
  public var processedOn: Foundation.Date?
  public var qty: Swift.String?
  public var quantity: Swift.Int?
  public var resellerServiceTypeId: CovantexSDK.EncounterOrderDto.ResellerServiceTypeId?
  public var salesRepresentativeFirstName: Swift.String?
  public var salesRepresentativeId: Swift.String?
  public var salesRepresentativeLastName: Swift.String?
  public var sentOn: Foundation.Date?
  public var statusId: CovantexSDK.EncounterOrderDto.StatusId?
  public var templateId: Swift.String?
  public var typeId: Swift.String?
  public var vendorId: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum EncounterStatus : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ExportStatusId : Swift.String {
    case Sent
    case Failed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ResellerServiceTypeId : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StatusId : Swift.String {
    case AuditPassed
    case AuditFailed
    case OrderAccepted
    case OrderRejected
    case OrderShipped
    case OrderReceived
    case New
    case Created
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public struct CaregiverResellerServiceDto : ObjectMapper.Mappable, Swift.Codable {
  public var caregiverFullName: Swift.String?
  public var caregiverId: Swift.String?
  public var caregiverResellerServiceId: Swift.String?
  public var maxAge: Swift.Int?
  public var minAge: Swift.Int?
  public var resellerId: Swift.String?
  public var resellerName: Swift.String?
  public var resellerServiceId: Swift.String?
  public var resellerServiceName: Swift.String?
  public var resellerServiceType: CovantexSDK.CaregiverResellerServiceDto.ResellerServiceType?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum ResellerServiceType : Swift.String, Swift.Codable {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Error {
  public func getLocalisedErrorMessage() -> Swift.String
  public func getErrorCode() -> Swift.String
  public func getStatusCode() -> Swift.Int
  public func getResponseDto() -> CovantexSDK.ResponseDto<CovantexSDK.DictionaryModel>
  public func isInternetError() -> Swift.Bool
  public func isTimeout() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class CovidService {
  public static let shared: CovantexSDK.CovidService
  public struct ScreeningQuestions {
    public var section: Swift.String
    public var items: [CovantexSDK.CovidScreeningDto]
  }
  public func url(_ baseUrl: CovantexSDK.CovidService.baseUrl) -> Swift.String
  public enum baseUrl {
    case covid19Screening
    public static func == (a: CovantexSDK.CovidService.baseUrl, b: CovantexSDK.CovidService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getCovidScreening(isForMetricSystem: Swift.Bool = false, completion: @escaping (_ covidScreeningDto: [CovantexSDK.CovidScreeningDto], _ arrScreeningQuestions: [CovantexSDK.CovidService.ScreeningQuestions], _ success: Swift.Bool) -> Swift.Void)
  @objc deinit
}
public class CountryDto : ObjectMapper.Mappable, Swift.Codable, Swift.CustomStringConvertible, Swift.Comparable {
  public var description: Swift.String {
    get
  }
  public var countryKey: Swift.String?
  public var countryName: Swift.String?
  public var defaultLanguage: Swift.String?
  public var countryDialingCode: Swift.String?
  public var isoCodeA2: Swift.String?
  public var isoCodeA3: Swift.String?
  public var isoCodeNumber: Swift.String?
  public var inputMaskMobile: Swift.String?
  public var inputMaskLandLine: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public static func == (lhs: CovantexSDK.CountryDto, rhs: CovantexSDK.CountryDto) -> Swift.Bool
  public static func < (lhs: CovantexSDK.CountryDto, rhs: CovantexSDK.CountryDto) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct SlotDto : ObjectMapper.Mappable {
  public var time: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct VitalReportItemDto : ObjectMapper.Mappable {
  public var itemsCount: Swift.Int?
  public var points: [CovantexSDK.VitalReportPointDto]?
  public var type: CovantexSDK.VitalTypeDto?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct OrganizationDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var alternativeNumber: Swift.String?
  public var customerCareNumber: Swift.String?
  public var email: Swift.String?
  public var employers: Swift.Int?
  public var externalAccountId: Swift.String?
  public var faxNumber: Swift.String?
  public var friEnd: Swift.String?
  public var friStart: Swift.String?
  public var hoursOfOperation: Swift.String?
  public var mainNumber: Swift.String?
  public var mon2FriEqual: Swift.Bool?
  public var monEnd: Swift.String?
  public var monStart: Swift.String?
  public var name: Swift.String?
  public var organizationId: Swift.String?
  public var organizationImageId: Swift.String?
  public var organizations: [CovantexSDK.OrganizationDto]?
  public var organizationTypeId: CovantexSDK.OrganizationDto.OrganizationTypeId?
  public var primaryContact: CovantexSDK.UserProfileDto?
  public var satEnd: Swift.String?
  public var satStart: Swift.String?
  public var sunEnd: Swift.String?
  public var sunStart: Swift.String?
  public var thuEnd: Swift.String?
  public var thuStart: Swift.String?
  public var tueEnd: Swift.String?
  public var tueStart: Swift.String?
  public var wedEnd: Swift.String?
  public var wedStart: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum OrganizationTypeId : Swift.String {
    case Client
    case Reseller
    case Hospital
    case Pharmacy
    case PhysicianPractice
    case ExtendedCareFacility
    case Employer
    case InsuranceCompany
    case Other
    case Store
    case Clinic
    case ProviderNetwork
    case CallCenter
    case Laboratory
    case DMESupplier
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func resizeWebContent()
}
public struct PatientActivityStatusDto : ObjectMapper.Mappable {
  public var patientActivityStatus: CovantexSDK.PatientActivityStatusDto.PatientActivityStatus?
  public var patientId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum PatientActivityStatus : Swift.String {
    case online
    case mobileOnline
    case offline
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func isOnline() -> Swift.Bool
  public func isOffline() -> Swift.Bool
}
public struct VitalReportDto : ObjectMapper.Mappable {
  public var from: Foundation.Date?
  public var generatedAt: Foundation.Date?
  public var name: Swift.String?
  public var patientId: Swift.String?
  public var reportId: Swift.String?
  public var statistic: [CovantexSDK.VitalReportItemDto]?
  public var to: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct MetricMeasurementSystemDto : ObjectMapper.Mappable, Swift.Codable {
  public var height: Swift.Bool?
  public var temperature: Swift.Bool?
  public var weight: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MhdValueDto : ObjectMapper.Mappable {
  public var type: Swift.String?
  public var value: Any?
  public var mhdValueId: Swift.String?
  public var patientId: Swift.String?
  public var timestamp: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public var valueBool: Swift.Bool? {
    get
  }
  public var valueString: Swift.String? {
    get
  }
  public var valueInt: Swift.Int? {
    get
  }
  public var valueDate: Foundation.Date? {
    get
  }
}
public struct TermsDto : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public var effectiveDate: Foundation.Date?
  public var terms: Swift.String?
  public var statement: Swift.String?
  public var patientId: Swift.String?
  public var patient: Swift.String?
  public var personCompleting: Swift.String?
  public var memberRoleId: CovantexSDK.PatientDto.MemberRoleId?
  public var relationPersonComplete: Swift.String?
  public var dateCompleting: Foundation.Date?
  public var termsAndConditionsId: Swift.String?
  public var statementId: Swift.String?
  public var planId: Swift.String?
  public var resellerId: Swift.String?
  public var stateId: Swift.String?
  public var currentPhone: Swift.String?
  public var caregiverTimeSlotIntervalMinutes: Swift.Int
  public init?(map: ObjectMapper.Map)
  public static func == (lhs: CovantexSDK.TermsDto, rhs: CovantexSDK.TermsDto) -> Swift.Bool
  public mutating func mapping(map: ObjectMapper.Map)
  public func toTermsAndConditionsPatient(currentPhone: Swift.String? = nil) -> CovantexSDK.TermsAndConditionsPatientDto
  public func toMedicalRelease(currentPhone: Swift.String? = nil) -> CovantexSDK.MedicalReleaseDto
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct VitalTypeOptionDto : ObjectMapper.Mappable {
  public var value: Swift.String?
  public var weight: Swift.Double?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct RegistrationPatientDto : ObjectMapper.Mappable {
  public var accessCode: Swift.String?
  public var accessCodeId: Swift.String?
  public var accessCodes: [Swift.String]?
  public var accessCodes_: [CovantexSDK.AccessCodesDto]?
  public var address: CovantexSDK.AddressDto?
  public var age: Swift.Int?
  public var bestContactNumberId: CovantexSDK.RegistrationPatientDto.BestContactNumberId?
  public var clientGroupId: Swift.String?
  public var clientId: Swift.String?
  public var clientMemberId: Swift.String?
  public var coverageDescription: Swift.String?
  public var dateOfBirth: Foundation.Date?
  public var dob: Foundation.Date?
  public var driverLicenseBack: Swift.String?
  public var driverLicenseFront: Swift.String?
  public var driverLicenseNumber: Swift.String?
  public var driverLicenseState: Swift.String?
  public var email: Swift.String?
  public var employerId: Swift.String?
  public var ethnicityId: Swift.String?
  public var externalAccountId: Swift.String?
  public var externalData: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var fullName: Swift.String?
  public var genderId: Swift.String?
  public var hireDate: Foundation.Date?
  public var homePhone: Swift.String?
  public var id: Swift.String?
  public var iin: Swift.String?
  public var insuranceCompanies: [Swift.String]?
  public var insuranceProviderId: Swift.String?
  public var insurances: [CovantexSDK.PatientInsuranceCompanyDto]?
  public var ip: Swift.String?
  public var lastName: Swift.String?
  public var maritalStatusId: Swift.String?
  public var medicaid: Swift.String?
  public var medicalReleases: [CovantexSDK.MedicalReleaseDto]?
  public var medicare: Swift.String?
  public var memberAccessLevelId: CovantexSDK.RegistrationPatientDto.MemberAccessLevelId?
  public var memberRoleId: CovantexSDK.RegistrationPatientDto.MemberRoleId?
  public var memberSince: Foundation.Date?
  public var mhd: CovantexSDK.MhdDto?
  public var middleName: Swift.String?
  public var mobileAppSMSSent: Swift.Bool?
  public var mobilePhone: Swift.String?
  public var mobileVisited: Swift.Bool?
  public var occupationId: CovantexSDK.RegistrationPatientDto.OccupationId?
  public var parentId: Swift.String?
  public var password: Swift.String?
  public var passwordResetNeeded: Swift.Bool?
  public var patientId: Swift.String?
  public var payerProfileDescription: Swift.String?
  public var paymentMethods: [Swift.String]?
  public var personId: Swift.String?
  public var pharmacyStoreId: Swift.String?
  public var phoneConfirmationCode: Swift.String?
  public var phoneConfirmationRequired: Swift.Bool?
  public var plans: [Swift.String]?
  public var preferredCaregivers: [Swift.String]?
  public var preferredLanguage: Swift.String?
  public var primaryCarePhysicians: [Swift.String]?
  public var profileImageId: Swift.String?
  public var registrationKey: Swift.String?
  public var resellerId: Swift.String?
  public var resellerName: Swift.String?
  public var rxNumber: Swift.String?
  public var securityQuestions: [CovantexSDK.SecurityQuestionDto]?
  public var selfManaged: Swift.Bool?
  public var signatureImageId: Swift.String?
  public var skypeId: Swift.String?
  public var sponsoringOrganizationId: Swift.String?
  public var ssn: Swift.String?
  public var status: CovantexSDK.RegistrationPatientDto.Status?
  public var termsAndConditions: [CovantexSDK.TermsAndConditionsPatientDto]?
  public var timeZone: Swift.String?
  public var treatedConditions: [CovantexSDK.TreatedConditionDto]?
  public var unregisteredDependents: [Swift.String]?
  public var userName: Swift.String?
  public var userStatusId: CovantexSDK.RegistrationPatientDto.UserStatusId?
  public var vmrConnectionSpeed: Swift.String?
  public var vmrID: Swift.String?
  public var vmrPIN: Swift.String?
  public var workEmail: Swift.String?
  public var workPhone: Swift.String?
  public var zoomUserId: Swift.String?
  public var appProviderSecretCode: Swift.String?
  public var packageId: Swift.String?
  public var packageName: Swift.String?
  public var packagePaymentAuthorizationId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum BestContactNumberId : Swift.String {
    case Mobile
    case Home
    case Work
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MemberAccessLevelId : Swift.String {
    case Full
    case Limited
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MemberRoleId : Swift.String {
    case Primary
    case Dependent
    case Spouse
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OccupationId : Swift.String {
    case FullTimeEmployed
    case PartTimeEmployed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case New
    case Created
    case Submitted
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UserStatusId : Swift.String {
    case Enabled
    case Disabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CovantexSDK.RegistrationPatientDto {
  public var name: Swift.String {
    get
  }
  public func isMaleGender() -> Swift.Bool?
  public func isFemaleGender() -> Swift.Bool?
  public func hasProfileImage() -> Swift.Bool
  public var bestContactNumber: Swift.String? {
    get
  }
}
public struct AccessCodeDto : ObjectMapper.Mappable {
  public var accessCodeId: Swift.String?
  public var clientId: Swift.String?
  public var clientOrganizationId: Swift.String?
  public var code: Swift.String?
  public var defaultPassword: Swift.String?
  public var defaultPlanId: Swift.String?
  public var description: Swift.String?
  public var resellerId: Swift.String?
  public var resellerOrganizationId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class PackageCouponDto : ObjectMapper.Mappable {
  public var couponId: Swift.String?
  public var description: Swift.String?
  public var fileId: Swift.String?
  public var howToRedeem: Swift.String?
  public var name: Swift.String?
  public var normalPrice: Swift.Double?
  public var offlineServiceId: Swift.String?
  public var packageCouponId: Swift.String?
  public var packageId: Swift.String?
  public var planId: Swift.String?
  public var price: Swift.Double?
  public var couponHowToRedeem: Swift.String?
  public var couponName: Swift.String?
  public var couponNormalPrice: Swift.Double?
  public var couponFileId: Swift.String?
  public var couponActionText: Swift.String?
  public var couponAmountPercent: Swift.Double?
  public var couponServices: Swift.Int?
  public var couponType: CovantexSDK.PackageCouponDto.ECouponType?
  public var applyChangesToSubscribers: CovantexSDK.PackageCouponDto.EApplyChangesToSubscribers?
  public var couponAmountFee: Swift.Double?
  public var couponDescription: Swift.String?
  public var couponPrice: Swift.Double?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum ECouponType : Swift.String {
    case Services
    case Amount
    case Percent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EApplyChangesToSubscribers : Swift.String {
    case ForNew
    case ForExisting
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public struct WorkWindowAttributeDto : ObjectMapper.Mappable, Swift.Codable {
  public var autoAssignPriority: CovantexSDK.WorkWindowAttributeDto.EPriority?
  public var caregiverWorkWindowId: Swift.String?
  public var country: Swift.String?
  public var patientAgeRoleId: CovantexSDK.WorkWindowAttributeDto.EPatientAgeRole?
  public var priority: CovantexSDK.WorkWindowAttributeDto.EPriority?
  public var stateId: Swift.String?
  public var workWindowAttributeId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum EPriority : Swift.String, Swift.Codable {
    case one
    case two
    case three
    case four
    case five
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EPatientAgeRole : Swift.String, Swift.Codable {
    case pediatrics
    case adult
    case geriatrics
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OAuthDto : ObjectMapper.Mappable {
  public var app: CovantexSDK.OAuthDto.App?
  public var callbackUrl: Swift.String?
  public var errorUrl: Swift.String?
  public var mobilePhone: Swift.String?
  public var personId: Swift.String?
  public var redirectUrl: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum App : Swift.String {
    case Google
    case Facebook
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct VitalValueDto : ObjectMapper.Mappable {
  public var patientId: Swift.String?
  public var timestamp: Foundation.Date?
  public var type: Swift.String?
  public var value: Swift.Double?
  public var vitalValueId: Swift.String?
  public var text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class EnvironmentFlagsDto : ObjectMapper.Mappable, Swift.Codable {
  public var country: Swift.String?
  public var defaultAccessCode: Swift.String?
  public var defaultRegistrationPackageId: Swift.String?
  public var paymentCurrency: Swift.String?
  public var paymentCurrencySymbol: Swift.String?
  public var personIdType: CovantexSDK.EnvironmentFlagsDto.PersonIdType?
  public var preregistrationVerificationRequired: Swift.Bool?
  public var patientLoginType: CovantexSDK.EnvironmentFlagsDto.PatientLoginType?
  public var oneTimePasswordSendingType: CovantexSDK.EnvironmentFlagsDto.OneTimePasswordSendingType?
  public var googleClientId: Swift.String?
  public var googleRedirectUrl: Swift.String?
  public var facebookClientId: Swift.String?
  public var facebookRedirectUrl: Swift.String?
  public var usedPaymentSystem: CovantexSDK.EnvironmentFlagsDto.UsedPaymentSystem?
  public var useCommuicationProviderType: CovantexSDK.EnvironmentFlagsDto.UseCommuicationProviderType?
  public var xenditPublicApiKey: Swift.String?
  public var processPaymentsForCancelledEncountersIfPatientNoShow: Swift.Bool?
  public var processPaymentsForCancelledEncountersIfPatientNoShowLessThenHoursBeforeScheduledOn: Swift.Int?
  public var allowedSetStatusCancelledReassignedRescheduledBeforeStartConsultHours: Swift.Int?
  public var useSureScript: Swift.Bool?
  public var audioIsEnabled: Swift.Bool?
  public var zegoAppId: Swift.String?
  public var zegoAppSign: Swift.String?
  public var zegoUrl: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum PatientLoginType : Swift.String, Swift.Codable {
    case ByLoginAndPassword
    case ByOneTimePassword
    case ByUserId
    case ByLoginToken
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OneTimePasswordSendingType : Swift.String, Swift.Codable {
    case Email
    case Sms
    case Event
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PersonIdType : Swift.String, Swift.Codable {
    case SSN
    case IIN
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UsedPaymentSystem : Swift.String, Swift.Codable {
    case authorizeNet
    case blueSnap
    case xendit
    case ePay
    case xenditInvoice
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UseCommuicationProviderType : Swift.String, Swift.Codable {
    case twilio
    case zoom
    case zego
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.EnvironmentFlagsDto {
  public enum eAuthenticationType {
    case byEmailOTP
    case bySMSOTP
    case byLoginPassword
    public static func == (a: CovantexSDK.EnvironmentFlagsDto.eAuthenticationType, b: CovantexSDK.EnvironmentFlagsDto.eAuthenticationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var authenticationType: CovantexSDK.EnvironmentFlagsDto.eAuthenticationType {
    get
  }
}
public struct FileDto : ObjectMapper.Mappable, Swift.Codable {
  public var description: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileStoragePlace: CovantexSDK.FileDto.FileStoragePlace?
  public var fileType: CovantexSDK.FileDto.FileType?
  public var id: Swift.String?
  public var storageFileName: Swift.String?
  public var url: Swift.String?
  public var videoLength: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum FileStoragePlace : Swift.String, Swift.Codable {
    case Local
    case S3
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FileType : Swift.String, Swift.Codable {
    case Image
    case Video
    case Audio
    case Unknown
    case Document
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ZipCodeDto : ObjectMapper.Mappable {
  public var zip: Swift.String?
  public var region: Swift.String?
  public var latitude: Swift.Double?
  public var longitude: Swift.Double?
  public var cities: [Swift.String]?
  public var country: Swift.String?
  public var address: Swift.String?
  public var city: Swift.String
  public var street: Swift.String
  public var number: Swift.String
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.ZipCodeDto {
  public func toAddressDto(_ prefilledCity: Swift.String = "") -> CovantexSDK.AddressDto
  public func getAddressWithDetails() -> Swift.String
  public func getAddressWithZipcode_State_City(_ prefilledCity: Swift.String = "") -> Swift.String
}
public struct AuthenticationFactorRequestDto : ObjectMapper.Mappable {
  public var authenticationFactorType: CovantexSDK.AuthenticationFactorRequestDto.AuthenticationFactorType?
  public var authenticationFactorRequestId: Swift.String?
  public var expirationTime: Foundation.Date?
  public var response: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum AuthenticationFactorType : Swift.String {
    case GoogleAuthenticator
    case SmsAuthenticator
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct SecurityQuestionsAnswerDto : ObjectMapper.Mappable {
  public var answer: Swift.String?
  public var securityQuestion: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterDto : ObjectMapper.Mappable {
  public var acceptedById: Swift.String?
  public var acceptedOn: Foundation.Date?
  public var accessCode: Swift.String?
  public var activeOn: Foundation.Date?
  public var activatedOn: Foundation.Date?
  public var activatedById: Swift.String?
  public var applicationId: Swift.String?
  public var assessments: [CovantexSDK.EncounterAssessmentDto]?
  public var audioClips: [CovantexSDK.FileDto]?
  public var bestContact: Swift.String?
  public var bestContactName: Swift.String?
  public var bestContactNumber: Swift.String?
  public var bestDayToCall: Swift.String?
  public var bestTimeToCall: Swift.String?
  public var billedTo: Swift.String?
  public var callbackNumberPhone: Swift.String?
  public var caregiverConsultFee: Swift.Double?
  public var caregiverName: Swift.String?
  public var caregiverFirstName: Swift.String?
  public var caregiverId: Swift.String?
  public var caregiverLastName: Swift.String?
  public var caregiverTimeSlotIntervalMinutes: Swift.Int?
  public var caregiverReviewed: Swift.Bool?
  public var caregiverTTR: Swift.Int?
  public var cgxOrders: Swift.String?
  public var chiefComplaint: Swift.String?
  public var clientName: Swift.String?
  public var clientOrganizationId: Swift.String?
  public var closedByFirstName: Swift.String?
  public var closedByLastName: Swift.String?
  public var closedById: Swift.String?
  public var closedOn: Foundation.Date?
  public var compoundRxOrders: Swift.String?
  public var consultDuration: Swift.Int?
  public var consultEnd: Foundation.Date?
  public var consultRequestId: Swift.String?
  public var consultRequestTypeId: Swift.String?
  public var country: Swift.String?
  public var covidScreeningResults: Swift.String?
  public var arrCovidScreeningDto: [CovantexSDK.CovidScreeningDto]?
  public var cptCodes: [CovantexSDK.EncounterCPTCodeDto]?
  public var createdDate: Foundation.Date?
  public var date: Foundation.Date?
  public var description: Swift.String?
  public var diagnoses: [CovantexSDK.EncounterDiagnosisDto]?
  public var dmeOrders: Swift.String?
  public var durationPhysicianCall: Swift.Int?
  public var encounterId: Swift.String?
  public var encounterOrders: [CovantexSDK.EncounterOrderDto]?
  public var encounterReviews: [Swift.String]?
  public var encounterServiceTypeId: CovantexSDK.EncounterDto.EncounterServiceTypeId?
  public var encounterRequestStatusId: Swift.Int?
  public var encounterStatusId: CovantexSDK.EncounterDto.EncounterStatusId?
  public var encounterStatus: CovantexSDK.EncounterDto.EncounterStatus?
  public var encounterTypeId: CovantexSDK.EncounterDto.EncounterTypeId?
  public var episodeId: Swift.String?
  public var expressOrderId: Swift.String?
  public var externalData: Swift.String?
  public var followUpRecommendedId: Swift.String?
  public var followUpSuggestedDays: Swift.Int?
  public var fullName: Swift.String?
  public var gender: Swift.String?
  public var historyPresentIllness: Swift.String?
  public var icdCodes: [CovantexSDK.EncounterICDCodeDto]?
  public var insuranceCompanyName: Swift.String?
  public var insuranceNames: Swift.String?
  public var IsAllergyorders: Swift.Bool?
  public var isCgxOrders: Swift.Bool?
  public var isCompoundRxOrders: Swift.Bool?
  public var isDmeOrders: Swift.Bool?
  public var isGsidOrders: Swift.Bool?
  public var isHrtOrders: Swift.Bool?
  public var isPgxOrders: Swift.Bool?
  public var isRx: Swift.Bool?
  public var isSrxOrders: Swift.Bool?
  public var joinMeetingUrl: Swift.String?
  public var labOrders: [Swift.String]?
  public var lastStatusOn: Foundation.Date?
  public var meetings: [CovantexSDK.EncounterMeetingDto]?
  public var memberConsultFee: Swift.Double?
  public var memberConsultFeePaid: Swift.Double?
  public var objective: Swift.String?
  public var organizationId: Swift.String?
  public var organizationName: Swift.String?
  public var parentEncounterId: Swift.String?
  public var patientCouponId: Swift.String?
  public var patientId: Swift.String?
  public var patientName: Swift.String?
  public var patientAge: Swift.String?
  public var patientAgeYears: Swift.Int?
  public var patientEmail: Swift.String?
  public var patientInsuranceCompanyId: Swift.String?
  public var patientNoShow: Swift.Bool?
  public var paymentAuthorizationId: Swift.String?
  public var paymentStatusCode: Swift.String?
  public var pgxOrders: Swift.String?
  public var photos: [CovantexSDK.FileDto]?
  public var physicianCallEnd: Foundation.Date?
  public var physicianCallEndTimeSpan: Swift.String?
  public var physicianCallStart: Foundation.Date?
  public var physicianCallStartTimeSpan: Swift.String?
  public var planId: Swift.String?
  public var prescriptions: [CovantexSDK.RxDto]?
  public var professionalTitle: Swift.String?
  public var questionnaires: [CovantexSDK.EncounterQuestionnaireDto]?
  public var redirectPatientAdditionalNote: Swift.String?
  public var redirectPatientId: Swift.String?
  public var requestedMedicalItems: Swift.String?
  public var refills: [CovantexSDK.EncounterRefillDto]?
  public var regularNotes: [CovantexSDK.EncounterNoteDto]?
  public var requestedById: Swift.String?
  public var requestedByName: Swift.String?
  public var reportedByFirstName: Swift.String?
  public var reportedById: Swift.String?
  public var reportedByLastName: Swift.String?
  public var resellerServices: Swift.String?
  public var resellerName: Swift.String?
  public var resellerOrganizationId: Swift.String?
  public var resellerServiceTypeId: CovantexSDK.EncounterDto.ResellerServiceTypeId?
  public var resolution: Swift.String?
  public var resolutionNotes: [CovantexSDK.EncounterNoteDto]?
  public var salesRepresentativeFirstName: Swift.String?
  public var salesRepresentativeId: Swift.String?
  public var salesRepresentativeLastName: Swift.String?
  public var scheduledByName: Swift.String?
  public var scheduledByFirstName: Swift.String?
  public var scheduledById: Swift.String?
  public var scheduledByLastName: Swift.String?
  public var scheduledByStart: Foundation.Date?
  public var scheduledByStartTimeSpan: Swift.String?
  public var scheduledByEnd: Foundation.Date?
  public var scheduledOn: Foundation.Date?
  public var startedById: Swift.String?
  public var startedByName: Swift.String?
  public var startedOn: Foundation.Date?
  public var statusOn: Foundation.Date?
  public var stateId: Swift.String?
  public var state: Swift.String?
  public var submitByStart: Foundation.Date?
  public var symptoms: [CovantexSDK.EncounterDto.Symptoms]?
  public var templateId: Swift.String?
  public var timeZone: Swift.String?
  public var totalConsultFee: Swift.Double?
  public var totalCharges: Swift.Double?
  public var totalTime: Swift.Int?
  public var totalTimeToRespond: Swift.Int?
  public var treatmentPlans: [CovantexSDK.EncounterTreatmentPlanDto]?
  public var validated: Swift.Bool?
  public var videoClips: [CovantexSDK.FileDto]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum ConsultRequestTypeId : Swift.String {
    case AnyAvailable
    case AutoAssign
    case Scheduled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncounterServiceTypeId : Swift.String {
    case Nonemergent
    case Psychiatric
    case Cardiac
    case Medical
    case Pulmonary
    case Surgical
    case Urology
    case Diagnostic
    case Lab
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncounterStatus : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncounterStatusId : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncounterTypeId : Swift.String {
    case Consult
    case Diagnostic
    case Lab
    case Surgery
    case Procedure
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ResellerServiceTypeId : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Symptoms : Swift.String {
    case Headache
    case BlurryVision
    case DryEyes
    case EyeIrritationDischarge
    case Earache
    case RingingInEars
    case DryMouth
    case RunnyNose
    case Weakness
    case SinusCongestion
    case NasalCongestion
    case ChestCongestion
    case SoreThroat
    case TroubleSwallowing
    case ToothPain
    case SwollenGlands
    case Heartburn
    case Nausea
    case Vomiting
    case AbdominalPain
    case Diarrhea
    case Constipation
    case Fever
    case Chills
    case MuscleAches
    case JointPainSwelling
    case BackPain
    case FlulikeSymptoms
    case Rash
    case PoisonIvy
    case InsectTickBite
    case Itching
    case Cramps
    case UrinaryFrequency
    case Incontinence
    case ExcessiveThirst
    case Cough
    case ShortnessOfBreath
    case BloodPressure
    case Anxiety
    case NeckPain
    case Numbness
    case SpeechImpairment
    case Dizziness
    case KidneyPain
    case BloodInUrine
    case EyeSwelling
    case LipsSwelling
    case TongueSwelling
    case Injury
    case Other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct AllergyDto : ObjectMapper.Mappable, Swift.Codable {
  public var fromDate: Foundation.Date?
  public var items: Swift.String?
  public var reaction: Swift.String?
  public var severityLevel: CovantexSDK.AllergyDto.SeverityLevel?
  public var toDate: Foundation.Date?
  public var type: CovantexSDK.AllergyDto.Type_?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum SeverityLevel : Swift.String, Swift.Codable {
    case Severe
    case Average
    case Mild
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Type_ : Swift.String, Swift.Codable {
    case Drug
    case Food
    case Other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncounterICDCodeDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public var description: Swift.String?
  public var encounterIcdCodeId: Swift.String?
  public var encounterId: Swift.String?
  public var icdCodeId: Swift.Int?
  public var shortDescription: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct TermsAndConditionsCaregiverDto : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public var effectiveDate: Foundation.Date?
  public var resellerId: Swift.String?
  public var termsAndConditionsStatementId: Swift.String?
  public var text: Swift.String?
  public var typeId: CovantexSDK.TermsAndConditionsCaregiverDto.TypeId?
  public var activeTermsId: Swift.String?
  public var agreedToActiveTerms: Swift.Bool?
  public var agreedToTermsId: Swift.String?
  public var caregiverId: Swift.String?
  public var currentPhone: Swift.String?
  public var dateCompleting: Foundation.Date?
  public var personCompleting: Swift.String?
  public var relationPersonComplete: Swift.String?
  public var statementId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public static func == (lhs: CovantexSDK.TermsAndConditionsCaregiverDto, rhs: CovantexSDK.TermsAndConditionsCaregiverDto) -> Swift.Bool
  public mutating func mapping(map: ObjectMapper.Map)
  public enum TypeId : Swift.String, Swift.Codable {
    case patient
    case caregiver
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.ZipcodesService {
  public func checkIsExistingZipcode_IsValid(zipCode: Swift.String, city: Swift.String, countryId: Swift.String, completion: @escaping (_ isValidZipCode: Swift.Bool, _ message: Swift.String) -> ())
  public func getZipcode(zipCode: Swift.String, countryId: Swift.String, completion: @escaping (_ zipCodeDto: CovantexSDK.ZipCodeDto?, _ message: Swift.String) -> ())
}
extension CovantexSDK.ZipcodesService {
  public func getAddress(city: Swift.String, street: Swift.String, number: Swift.String, country: Swift.String, completion: @escaping (_ arrZipCodeDto: [CovantexSDK.ZipCodeDto], _ message: Swift.String) -> ())
}
extension CovantexSDK.ZipcodesService {
  public func getCountryandSave(_ completion: ((Swift.Bool) -> ())? = nil)
}
public struct NotificationDataHolder : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public static func == (left: CovantexSDK.NotificationDataHolder, right: CovantexSDK.NotificationDataHolder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var aps: CovantexSDK.NotificationDataHolder.APS?
  public var message: Swift.String?
  public var text: Swift.String?
  public var timestamp: Foundation.Date?
  public var notificationType: CovantexSDK.NotificationDataHolder.notification_type?
  public var eventType: Swift.String?
  public var userTo: CovantexSDK.NotificationDataHolder.UserTo?
  public var userFrom: CovantexSDK.NotificationDataHolder.UserFrom?
  public var caregiver: CovantexSDK.NotificationDataHolder.Caregiver?
  public var consultRequestId: Swift.String?
  public var apiKey: Swift.String?
  public var apiUrl: Swift.String?
  public var userDevices: [CovantexSDK.UserDeviceDto]?
  public var communication: CovantexSDK.NotificationDataHolder.Communication?
  public var encounter: CovantexSDK.NotificationDataHolder.Encounter?
  public var connectedParticipant: CovantexSDK.NotificationDataHolder.ConnectedParticipant?
  public var disconnectedParticipant: CovantexSDK.NotificationDataHolder.DisconnectedParticipant?
  public var declinedParticipant: CovantexSDK.NotificationDataHolder.DeclinedParticipant?
  public var meetingEndedByParticipant: CovantexSDK.NotificationDataHolder.MeetingEndedByParticipant?
  public var vitalsReportReady: CovantexSDK.NotificationDataHolder.VitalsReportReady?
  public var newConsults: [CovantexSDK.PatientDto]?
  public var callId: Foundation.UUID {
    get
  }
  public var callMetrics: CovantexSDK.NotificationDataHolder.CallMetrics?
  public var callStatus: CovantexSDK.NotificationDataHolder.CallStatus?
  public var connectedParticipants: Swift.Set<Swift.String>
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum notification_type : Swift.String, Swift.Codable {
    case pushMessage
    case onConsultCreated
    case onConsultAppointed
    case onCaregiverFound
    case onEncounterChanged
    case onEncounterStatusChanged
    case onPatientJoined
    case onCommunicationReportReady
    case onPatientDeclinedVideoCall
    case onParticipantDeclinedVideoCall
    case patientDeclinedVideoCallMessage
    case participantDeclinedVideoCallMessage
    case onEncounterOrderChanged
    case onEncounterOrderDeleted
    case onVideoConferenceCreatedExtended
    case onVitalsReportGenerated
    case onCommunicationCreated
    case onCommunicationConnected
    case onCommunicationDisconnected
    case onCommunicationClosed
    case communicationCreatedMessage
    case communicationConnectedMessage
    case communicationDisconnectedMessage
    case communicationClosedMessage
    case newConsultationAvailable
    case vitalsReportReady
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct APS : Swift.Codable, ObjectMapper.Mappable {
    public var alert: CovantexSDK.NotificationDataHolder.APSAlert?
    public var topic: Swift.String?
    public var pushType: Swift.String?
    public var mutableContent: Swift.Bool?
    public var contentAvailable: Swift.Bool?
    public var sound: Swift.String?
    public var badge: Swift.Int?
    public var vibrate: Swift.Bool?
    public var isSilentPush: Swift.Bool?
    public var isVoIPPush: Swift.Bool?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func isSilent() -> Swift.Bool
    public func isVoIP() -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct APSAlert : Swift.Codable, ObjectMapper.Mappable {
    public var title: Swift.String?
    public var subtitle: Swift.String?
    public var body: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct UserTo : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var profileImageId: Swift.String?
    public var participantType: CovantexSDK.NotificationDataHolder.UserTo.ParticipantType?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public enum ParticipantType : Swift.String, Swift.Codable {
      case doctor
      case patient
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func isPatient() -> Swift.Bool
    public func isDoctor() -> Swift.Bool
    public func fullName() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct UserFrom : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var profileImageId: Swift.String?
    public var participantType: CovantexSDK.NotificationDataHolder.UserFrom.ParticipantType?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public enum ParticipantType : Swift.String, Swift.Codable {
      case doctor
      case patient
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func isPatient() -> Swift.Bool
    public func isDoctor() -> Swift.Bool
    public func fullName() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Caregiver : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var profileImageId: Swift.String?
    public var professionalTitle: Swift.String?
    public var specialities: [Swift.String]?
    public var timeSlotIntervalMinutes: Swift.Int?
    public var fullName: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func caregiverName() -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Communication : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var callToken: Swift.String?
    public var token: Swift.String?
    public var participantId: Swift.String?
    public var meetingId: Swift.String?
    public var eventStatus: CovantexSDK.NotificationDataHolder.Communication.CommunicationEventStatus?
    public var communicationType: CovantexSDK.NotificationDataHolder.Communication.CommunicationType?
    public var providerType: CovantexSDK.NotificationDataHolder.Communication.ProviderType?
    public var tokenParticipantName: Swift.String?
    public var tokenParticipantUserId: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public mutating func updateMeetingId(usingToken token: Swift.String?)
    public enum CommunicationType : Swift.String, Swift.Codable {
      case Voice
      case Video
      case Sms
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum CommunicationEventStatus : Swift.String, Swift.Codable {
      case Created
      case Ended
      case Declined
      case SmsSent
      case SmsDelivered
      case ParticipantConnected
      case ParticipantDisconnected
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum ProviderType : Swift.String, Swift.Codable {
      case Twilio
      case Zoom
      case Zego
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Encounter : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var encounterStatus: CovantexSDK.NotificationDataHolder.Encounter.EncounterStatus?
    public var scheduledOn: Foundation.Date?
    public var resellerServiceType: Swift.String?
    public var resellerServiceId: Swift.String?
    public var resellerId: Swift.String?
    public var planId: Swift.String?
    public var clientId: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public enum EncounterStatus : Swift.String, Swift.Codable {
      case Started
      case Scheduled
      case Rescheduled
      case Active
      case PendingPayment
      case Closed
      case Unpaid
      case Accepted
      case Cancelled
      case TimedOut
      case Redirected
      case RedirectedAndPaid
      case Preprocessing
      case ClosedAndPaid
      case Failed
      case FailedAndPaid
      case Reassigned
      case Postprocessing
      case CancelledAndPaid
      case NoShow
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ConnectedParticipant : Swift.Codable, ObjectMapper.Mappable {
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var userId: Swift.String?
    public var communicationParticipantId: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func name() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DisconnectedParticipant : Swift.Codable, ObjectMapper.Mappable {
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var userId: Swift.String?
    public var communicationParticipantId: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func name() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DeclinedParticipant : Swift.Codable, ObjectMapper.Mappable {
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public var userId: Swift.String?
    public var communicationParticipantId: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func name() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MeetingEndedByParticipant : Swift.Codable, ObjectMapper.Mappable {
    public var firstName: Swift.String?
    public var lastName: Swift.String?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func name() -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct VitalsReportReady : Swift.Codable, ObjectMapper.Mappable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var createBy: Foundation.Date?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CallMetrics : Swift.Codable, ObjectMapper.Mappable {
    public var startTime: Foundation.Date?
    public var endTime: Foundation.Date?
    public init?(map: ObjectMapper.Map)
    public mutating func mapping(map: ObjectMapper.Map)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum CallStatus : Swift.String, Swift.Codable {
    case ringing
    case accepted
    case viewed
    case declined
    case finished
    case joinFromAnotherDevice
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func getJSON() -> [Swift.String : Any]
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public func trimmed() -> Swift.String
}
public struct VitalReportPointDto : ObjectMapper.Mappable {
  public var timestamp: Foundation.Date?
  public var value: Swift.Double?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class MainServiceSession : Swift.Codable, ObjectMapper.Mappable {
  public var apiKey: Swift.String
  public var apiUrl: Swift.String {
    get
    set
  }
  public var apiUserRole: Swift.String
  public var authorization: Swift.String
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func getHeaders() -> [Swift.String : Swift.String]
  public func getHeadersDict() -> Foundation.NSDictionary
  public func getHTTPHeaders() -> Alamofire.HTTPHeaders
  public func getBaseUrlOnly() -> Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PlanSlotCaregiverDto : ObjectMapper.Mappable {
  public var age: Swift.Int?
  public var caregiverId: Swift.String?
  public var city: Swift.String?
  public var firstName: Swift.String?
  public var gender: Swift.String?
  public var lastName: Swift.String?
  public var memberConsultFee: Swift.Double?
  public var planName: Swift.String?
  public var professionalTitle: Swift.String?
  public var profileImageId: Swift.String?
  public var services: Swift.String?
  public var specialties: Swift.String?
  public var state: Swift.String?
  public var zipCode: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PasswordRecoveryRequestDto : ObjectMapper.Mappable {
  public var confirmationUrl: Swift.String?
  public var email: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var userName: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct TermsAndConditionsStatementDto : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public var effectiveDate: Foundation.Date?
  public var resellerId: Swift.String?
  public var termsAndConditionsStatementId: Swift.String?
  public var text: Swift.String?
  public var typeId: CovantexSDK.TermsAndConditionsStatementDto.TypeId?
  public init?(map: ObjectMapper.Map)
  public static func == (lhs: CovantexSDK.TermsAndConditionsStatementDto, rhs: CovantexSDK.TermsAndConditionsStatementDto) -> Swift.Bool
  public mutating func mapping(map: ObjectMapper.Map)
  public enum TypeId : Swift.String, Swift.Codable {
    case patient
    case caregiver
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public class EncounterOrderMedicalItemDto : ObjectMapper.Mappable {
  public var description: Swift.String?
  public var deviceType: Swift.String?
  public var dosage: Swift.String?
  public var encounterOrderId: Swift.String?
  public var encounterOrderMedicalItemId: Swift.String?
  public var form: Swift.String?
  public var isoCodeNumber: Swift.String?
  public var inputMaskMobile: Swift.String?
  public var inputMaskLandLine: Swift.String?
  public var gene: Swift.String?
  public var hcpcsCode: Swift.String?
  public var hgvs: Swift.String?
  public var icdCodes: Swift.String?
  public var labTestName: Swift.String?
  public var labTestOption: Swift.String?
  public var location: Swift.String?
  public var loinc: Swift.String?
  public var medicalItemId: Swift.String?
  public var medicalItemName: Swift.String?
  public var medicalItemType: CovantexSDK.EncounterOrderMedicalItemDto.MedicalItemType?
  public var quantity: Swift.String?
  public var refills: Swift.String?
  public var sig: Swift.String?
  public var size: Swift.String?
  public var specimenType: Swift.String?
  public var strength: Swift.String?
  public var templateId: Swift.String?
  public var vendorMedicalItemId: Swift.String?
  public var resellerServiceType: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum MedicalItemType : Swift.String {
    case Rx
    case Lab
    case Referrals
    case SickLeave
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PhysiciansService {
  public static let shared: CovantexSDK.PhysiciansService
  public func url(_ baseUrl: CovantexSDK.PhysiciansService.baseUrl) -> Swift.String
  public enum baseUrl {
    case physicians
    public static func == (a: CovantexSDK.PhysiciansService.baseUrl, b: CovantexSDK.PhysiciansService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getPhysician(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PrimaryCarePhysicianDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPhysicians(_ apiQuery: CovantexSDK.ApiQuery, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PrimaryCarePhysicianDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPhysician(body: CovantexSDK.PrimaryCarePhysicianDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PrimaryCarePhysicianDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePhysician(id: Swift.String, body: CovantexSDK.PrimaryCarePhysicianDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PrimaryCarePhysicianDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XenditService {
  public static let shared: CovantexSDK.XenditService
  public func url(_ baseUrl: CovantexSDK.XenditService.baseUrl) -> Swift.String
  public enum baseUrl {
    case creditCardTokens
    public static func == (a: CovantexSDK.XenditService.baseUrl, b: CovantexSDK.XenditService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func createToken(usingXenditPublicApiKey xenditPublicApiKey: Swift.String, request: CovantexSDK.XenditCreateTokenDto, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.XenditTokenDto>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getHeaders(usingXenditPublicApiKey xenditPublicApiKey: Swift.String) -> ([Swift.String : Swift.String])
  @objc deinit
}
public struct ProviderNetworkCaregiverDto : ObjectMapper.Mappable {
  public var caregiverId: Swift.String?
  public var caregiverName: Swift.String?
  public var email: Swift.String?
  public var licenseStates: [Swift.String]?
  public var mobilePhone: Swift.String?
  public var primaryContact: CovantexSDK.UserProfileDto?
  public var providerNetworkCaregiverId: Swift.String?
  public var providerNetworkId: Swift.String?
  public var providerNetworkName: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct ApplicationPlanDto : ObjectMapper.Mappable, Swift.Codable {
  public var applicationId: Swift.String?
  public var applicationPlanId: Swift.String?
  public var planId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccessCodesDto : ObjectMapper.Mappable, Swift.Codable {
  public var accessCode: Swift.String?
  public var original: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncounterStatusDto : ObjectMapper.Mappable {
  public var encounterId: Swift.String?
  public var encounterStatus: CovantexSDK.EncounterStatusDto.EncounterStatus?
  public var reassignedCaregiverId: Swift.String?
  public var rescheduledOn: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum EncounterStatus : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct PickListValueDto : ObjectMapper.Mappable {
  public var key: Swift.String?
  public var translations: [CovantexSDK.PickListValueTranslationDto]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct SnsConfigDto : ObjectMapper.Mappable, Swift.Codable {
  public var accessKeyId: Swift.String?
  public var region: Swift.String?
  public var secretAccessKey: Swift.String?
  public var topicArn: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WaitingRoomDto : ObjectMapper.Mappable {
  public var alert: Swift.Int?
  public var bestContact: Swift.String?
  public var bestContactName: Swift.String?
  public var caregiverConsultFee: Swift.Int?
  public var caregiverId: Swift.String?
  public var caregiverName: Swift.String?
  public var chiefComplaint: Swift.String?
  public var clientOrganizationId: Swift.String?
  public var consultRequestTypeId: Swift.Int?
  public var country: Swift.String?
  public var date: Foundation.Date?
  public var encounterId: Swift.String?
  public var encounterStatus: Swift.String?
  public var gender: Swift.String?
  public var patientAge: Swift.String?
  public var patientAgeYears: Swift.Int?
  public var patientId: Swift.String?
  public var patientName: Swift.String?
  public var requestedById: Swift.String?
  public var requestedByName: Swift.String?
  public var resellerOrganizationId: Swift.String?
  public var resellerServiceTypeId: Swift.Int?
  public var scheduledByEnd: Foundation.Date?
  public var scheduledById: Swift.String?
  public var scheduledByName: Swift.String?
  public var stateId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterTreatmentPlanDto : ObjectMapper.Mappable {
  public var encounterId: Swift.String?
  public var text: Swift.String?
  public var timestamp: Foundation.Date?
  public var treatmentPlanId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterAssessmentDto : ObjectMapper.Mappable {
  public var assessmentId: Swift.String?
  public var encounterId: Swift.String?
  public var text: Swift.String?
  public var timestamp: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PatientOfflineServiceDto : ObjectMapper.Mappable {
  public var offlineServiceId: Swift.String?
  public var patientCouponId: Swift.String?
  public var patientId: Swift.String?
  public var patientOfflineServiceId: Swift.String?
  public var signature: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PlanSlotDto : ObjectMapper.Mappable {
  public var caregiverCount: Swift.Int?
  public var caregivers: [CovantexSDK.CaregiverDto]?
  public var time: Foundation.Date?
  public var isSelected: Swift.Bool
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct IsomorphicConfigDto : ObjectMapper.Mappable, Swift.Codable {
  public var bitBucketUrl: Swift.String?
  public var branch: Swift.String?
  public var corsProxy: Swift.String?
  public var depth: Swift.Int?
  public var dir: Swift.String?
  public var fastForwardOnly: Swift.Bool?
  public var password: Swift.String?
  public var remote: Swift.String?
  public var singleBranch: Swift.Bool?
  public var userName: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VitalTypeDto : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var memberRole: Swift.String?
  public var name: Swift.String?
  public var options: [CovantexSDK.VitalTypeOptionDto]?
  public var range: CovantexSDK.VitalTypeRangeDto?
  public var type: Swift.String?
  public var units: Swift.String?
  public var group: Swift.String?
  public var valueExpLevel1Minutes: Swift.Int?
  public var valueExpLevel2Minutes: Swift.Int?
  public var value: Swift.Double?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct ParticipantDto : ObjectMapper.Mappable {
  public var communicationId: Swift.String?
  public var communicationParticipantId: Swift.String?
  public var communicationType: CovantexSDK.ParticipantDto.CommunicationType?
  public var communicationStatus: CovantexSDK.ParticipantDto.CommunicationStatus?
  public var externalUserName: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var generateLink: Swift.Bool?
  public var link: Swift.String?
  public var participantStatus: CovantexSDK.ParticipantDto.ParticipantStatus?
  public var providerType: CovantexSDK.ParticipantDto.ProviderType?
  public var token: Swift.String?
  public var userId: Swift.String?
  public var userDeviceId: Swift.String?
  public var userDevice: CovantexSDK.UserDeviceDto?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func getInviteParticipantLink(_ environmentType: CovantexSDK.APISettings.APIEnvironmentType = API.settings.mode) -> Swift.String
  public enum CommunicationType : Swift.String {
    case Voice
    case Video
    case Sms
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ParticipantStatus : Swift.String {
    case Connected
    case Disconnected
    case NotParticipated
    case Registered
    case Completed
    case Connecting
    case Busy
    case Disconnecting
    case Notified
    case FailedNotify
    case Declined
    case IsReady
    case NotNotifyable
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CommunicationStatus : Swift.String {
    case Registered
    case Created
    case Active
    case Inactive
    case Closed
    case Failed
    case Completed
    case Declined
    case NoAnswer
    case Success
    case ShortCall
    case ParticipantToUnreachable
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ProviderType : Swift.String {
    case Twilio
    case Zoom
    case Zego
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct EncounterCPTCodeDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public var cptCodeId: Swift.Int?
  public var encounterCptCodeId: Swift.String?
  public var encounterId: Swift.String?
  public var shortDescription: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class EnumValueDto : ObjectMapper.Mappable, Swift.Codable, Swift.Hashable, Swift.Equatable {
  public var key: Swift.String?
  public var value: Swift.String?
  public var isSelected: Swift.Bool
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public static func == (left: CovantexSDK.EnumValueDto, right: CovantexSDK.EnumValueDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PackagePlanDto : ObjectMapper.Mappable {
  public var packageId: Swift.String?
  public var packagePlanId: Swift.String?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterQuestionnaireDto : ObjectMapper.Mappable {
  public var answer: Swift.String?
  public var encounterId: Swift.String?
  public var encounterOrderTypeId: Swift.String?
  public var encounterQuestionnaireId: Swift.String?
  public var icdCode: Swift.String?
  public var questionCode: Swift.String?
  public var timestamp: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct StatementDto : ObjectMapper.Mappable {
  public var country: Swift.String?
  public var effectiveDate: Foundation.Date?
  public var resellerId: Swift.String?
  public var state: Swift.String?
  public var statementId: Swift.String?
  public var text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct ConfirmedCaregiverDto : ObjectMapper.Mappable {
  public var caregiverId: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var middleName: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct UserProfileDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var bestContactNumberId: CovantexSDK.UserProfileDto.BestContactNumberId?
  public var dob: Foundation.Date?
  public var email: Swift.String?
  public var employerId: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var fullName: Swift.String?
  public var genderId: Swift.String?
  public var homePhone: Swift.String?
  public var ip: Swift.String?
  public var lastName: Swift.String?
  public var middleName: Swift.String?
  public var mobileAppSMSSent: Swift.Bool?
  public var mobilePhone: Swift.String?
  public var mobileVisited: Swift.Bool?
  public var password: Swift.String?
  public var passwordResetNeeded: Swift.Bool?
  public var personId: Swift.String?
  public var preferredLanguage: Swift.String?
  public var profileImageId: Swift.String?
  public var securityQuestions: [CovantexSDK.SecurityQuestionDto]?
  public var skypeId: Swift.String?
  public var timeZone: Swift.String?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public var userStatusId: CovantexSDK.UserProfileDto.UserStatusId?
  public var workEmail: Swift.String?
  public var workPhone: Swift.String?
  public var zoomUserId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum BestContactNumberId : Swift.String {
    case Mobile
    case Home
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UserStatusId : Swift.String {
    case Enabled
    case Disabled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ConsultRequestDto : ObjectMapper.Mappable {
  public var caregiversConfirmations: [CovantexSDK.ConfirmedCaregiverDto]?
  public var chosenCaregiverId: Swift.String?
  public var consultRequestId: Swift.String?
  public var encounterId: Swift.String?
  public var patientId: Swift.String?
  public var status: CovantexSDK.ConsultRequestDto.Status?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum Status : Swift.String {
    case Active
    case Closed
    case Overdue
    case Scheduled
    case Canceled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct RegionalSpecificSettingsDto : ObjectMapper.Mappable, Swift.Codable {
  public var country: Swift.String?
  public var maskPhoneNumber: Swift.String?
  public var maskPhoneNumber11Digit: Swift.String?
  public var maskPhoneNumber12Digit: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MhdDto : ObjectMapper.Mappable, Swift.Codable {
  public var adhd: Swift.Bool?
  public var allergies: [CovantexSDK.AllergyDto]?
  public var anemia: Swift.Bool?
  public var arthritis: Swift.Bool?
  public var asthma: Swift.Bool?
  public var backPain: Swift.Bool?
  public var bloodDisorder: Swift.Bool?
  public var cancer: Swift.Bool?
  public var chronicCough: Swift.Bool?
  public var colds: Swift.Bool?
  public var completionDate: Foundation.Date?
  public var constipation: Swift.Bool?
  public var cost: Swift.Double?
  public var currentSpecialist: Swift.String?
  public var depression: Swift.Bool?
  public var diabetesType1: Swift.Bool?
  public var diabetesType2: Swift.Bool?
  public var diarrhea: Swift.Bool?
  public var digestiveStomach: Swift.Bool?
  public var drinkAlcohol: Swift.String?
  public var dysrhythmia: Swift.Bool?
  public var earProblem: Swift.Bool?
  public var emphysema: Swift.Bool?
  public var endocrine: Swift.Bool?
  public var examPcpName: Swift.String?
  public var examPcpPhone: Swift.String?
  public var examPcpZipCode: Swift.String?
  public var familyHistoryNotes: [CovantexSDK.MhdNoteDto]?
  public var gout: Swift.Bool?
  public var hazardousMaterial: Swift.String?
  public var heartAttack: Swift.Bool?
  public var heartProblem: Swift.Bool?
  public var highBloodPressure: Swift.Bool?
  public var hiv: Swift.Bool?
  public var hospitalization: Swift.Bool?
  public var kidneyProblem: Swift.Bool?
  public var lastDrVisitDate: Swift.String?
  public var lukemia: Swift.Bool?
  public var lungProblem: Swift.Bool?
  public var married: Swift.Int?
  public var mhdHistories: [CovantexSDK.MhdHistoryDto]?
  public var mhdId: Swift.String?
  public var muscleProblem: Swift.Bool?
  public var noAllergies: Swift.Bool?
  public var noMedicalHistory: Swift.Bool?
  public var otherProblem: Swift.String?
  public var pancreasProblem: Swift.Bool?
  public var pastPhysicalDate: Foundation.Date?
  public var patientId: Swift.String?
  public var personCompleting: Swift.String?
  public var personCompletingRelationship: Swift.String?
  public var pneumonia: Swift.Bool?
  public var price: Swift.Double?
  public var primaryName: Swift.String?
  public var printPrimaryName: Swift.String?
  public var prostate: Swift.Bool?
  public var psychoLogicAldisOrder: Swift.Bool?
  public var recreationalDrugs: Swift.String?
  public var relationshipToPatient: Swift.String?
  public var seizure: Swift.Bool?
  public var sinus: Swift.Bool?
  public var skinProblem: Swift.Bool?
  public var sleepApnea: Swift.Bool?
  public var smoke: Swift.String?
  public var statusDate: Foundation.Date?
  public var statusId: CovantexSDK.MhdDto.StatusId?
  public var stroke: Swift.Bool?
  public var surgery: Swift.Bool?
  public var testicular: Swift.Bool?
  public var tetanusShotDate: Foundation.Date?
  public var tetanusShotPcpName: Swift.String?
  public var tetanusShotPcpPhone: Swift.String?
  public var tetanusShotZipCode: Swift.String?
  public var thyroid: Swift.Bool?
  public var toxicChemicals: Swift.Bool?
  public var triglycerides: Swift.Bool?
  public var ulcers: Swift.Bool?
  public var urinaryTract: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum StatusId : Swift.String, Swift.Codable {
    case Active
    case Archive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func getArrMhdDtoMedicalHistory() -> [CovantexSDK.MhdDtoMedicalHistory]
  public mutating func getMhdDtoMedicalHistory(arrMhdDtoMedicalHistory: [CovantexSDK.MhdDtoMedicalHistory]) -> CovantexSDK.MhdDto
  public mutating func updateMhdDtoMedicalHistory(arrMhdDtoMedicalHistory: [CovantexSDK.MhdDtoMedicalHistory]) -> CovantexSDK.MhdDto
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class MhdDtoMedicalHistory {
  final public let name: Swift.String?
  final public let key: Swift.String?
  public var isChecked: Swift.Bool?
  public init(name: Swift.String, key: Swift.String, isChecked: Swift.Bool)
  public init()
  @objc deinit
}
public struct RxDto : ObjectMapper.Mappable {
  public var caregiverFirstName: Swift.String?
  public var caregiverId: Swift.String?
  public var caregiverLastName: Swift.String?
  public var caregiverMiddleName: Swift.String?
  public var days: Swift.Int?
  public var diagnosisRxId: Swift.String?
  public var disease: Swift.String?
  public var drugGenericId: Swift.String?
  public var drugId: Swift.String?
  public var encounterId: Swift.String?
  public var end: Foundation.Date?
  public var fullDrugName: Swift.String?
  public var name: Swift.String?
  public var otc: Swift.Bool?
  public var qty: Swift.String?
  public var refills: Swift.Int?
  public var sig: Swift.String?
  public var start: Foundation.Date?
  public var status: Swift.String?
  public var strength: Swift.String?
  public var timestamp: Foundation.Date?
  public var type: CovantexSDK.RxDto.Type_?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum Type_ : Swift.String {
    case eRx
    case sRx
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CovantexSDK.API {
  public static func setTranslations(dict: Foundation.NSDictionary)
  public static func getTranslations() -> [Swift.String : Swift.String]
  public static func setEnum(arrEnum: [CovantexSDK.EnumDto])
  public static func getEnum() -> [CovantexSDK.EnumDto]
  public static func getEnum(for key: Swift.String, sortByKey: Swift.Bool? = false) -> [CovantexSDK.EnumValueDto]
}
extension CovantexSDK.API {
  public static func setEnvironmentFlags(model: CovantexSDK.EnvironmentFlagsDto)
  public static func getEnvironmentFlags() -> CovantexSDK.EnvironmentFlagsDto
  public static func getEnvironmentFlagsandSave(completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> ())
}
extension CovantexSDK.API {
  public static func setApplicationDto(model: CovantexSDK.ApplicationDto)
  public static func getApplicationDto() -> CovantexSDK.ApplicationDto
}
extension CovantexSDK.API {
  public static func setCountryDto(arrModel: [CovantexSDK.CountryDto])
  public static func getCountryDto() -> [CovantexSDK.CountryDto]
}
extension CovantexSDK.API {
  public static func setPatientDto(model: CovantexSDK.PatientDto)
  public static func getPatientDto() -> CovantexSDK.PatientDto
  public static func setCaregiverDto(model: CovantexSDK.CaregiverDto)
  public static func getCaregiverDto() -> CovantexSDK.CaregiverDto
}
public struct ResolutionNoteDto : ObjectMapper.Mappable {
  public var createdDate: Swift.String?
  public var encounterId: Swift.String?
  public var encounterNoteId: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var noteType: Swift.String?
  public var role: Swift.String?
  public var text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class PatientPlanDto : ObjectMapper.Mappable, Swift.Equatable, Swift.Codable {
  public static func == (lhs: CovantexSDK.PatientPlanDto, rhs: CovantexSDK.PatientPlanDto) -> Swift.Bool
  public var agreedMedicalRelease: Swift.Bool?
  public var agreedTermsAndConditions: Swift.Bool?
  public var isScheduledOnRequired: Swift.Bool?
  public var patientConsultFee: Swift.Double?
  public var patientId: Swift.String?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public var statusId: CovantexSDK.PatientPlanDto.StatusId?
  public var isPlanSelected: Swift.Bool?
  public var freeConsults: Swift.Int?
  public var patientDiscountedConsultFee: Swift.Double?
  public var planPatientFeesDto: CovantexSDK.PlanPatientFeesDto?
  public var arrPatientCouponDto: [CovantexSDK.PatientCouponDto]?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum StatusId : Swift.String, Swift.Codable {
    case Active
    case Inactive
    case Unpaid
    case Incomplete
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.PatientPlanDto {
  public var isfreeConsultsAvailable: Swift.Bool {
    get
  }
  public var isAnyAmountToPay: Swift.Bool {
    get
  }
  public var amount: Swift.Double {
    get
  }
  public var youSave: Swift.Double {
    get
  }
  public var discountPercentage: Swift.Double {
    get
  }
}
extension Swift.Double {
  public var getTimeFormatted: Swift.String {
    get
  }
  public func getFormattedCurrency(_ defaultCountry: Swift.String = "", _ defaultPaymentCurrencySymbol: Swift.String = "") -> Swift.String
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public class var isPhone: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public class var isPad: Swift.Bool {
    get
  }
}
public struct XenditCreateTokenCardDataDto : ObjectMapper.Mappable {
  public var accountNumber: Swift.String?
  public var expMonth: Swift.String?
  public var expYear: Swift.String?
  public var cvn: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PlanDto : ObjectMapper.Mappable, Swift.Equatable, Swift.Hashable {
  public static func == (lhs: CovantexSDK.PlanDto, rhs: CovantexSDK.PlanDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var accessCode: Swift.String?
  public var accessCodes: Swift.String?
  public var activePlanRevenueModelId: Swift.String?
  public var activeRevenueModelId: Swift.String?
  public var client: Swift.String?
  public var clientConsultFee: Swift.String?
  public var clientId: Swift.String?
  public var clientOrganizationId: Swift.String?
  public var clientPMPMFee: Swift.String?
  public var consultFee: Swift.String?
  public var consultNumber: Swift.String?
  public var consultTFN: Swift.String?
  public var covidScreeningIsRequired: Swift.Bool?
  public var custSvcTFN: Swift.String?
  public var customerService: Swift.String?
  public var effectiveDate: Swift.String?
  public var futureRevenueModelId: Swift.String?
  public var groupName: Swift.String?
  public var insuranceConsultFee: Swift.String?
  public var insurancePMPMFee: Swift.String?
  public var isCheckBoxAlreadySelected: Swift.Bool?
  public var isCheckBoxEnable: Swift.Bool?
  public var isDefault: Swift.Bool?
  public var isPlanSelected: Swift.Bool?
  public var isScheduledOnRequired: Swift.Bool?
  public var isValid: Swift.Bool?
  public var maxParticipants: Swift.Int?
  public var memberConsultFee: Swift.String?
  public var memberNotAllowedCreateConsult: Swift.Bool?
  public var memberPMPMFee: Swift.String?
  public var name: Swift.String?
  public var parentPlanId: Swift.String?
  public var payeeCaregiverConsultFee: Swift.String?
  public var payeeCaregiverPMPMFee: Swift.String?
  public var payeeClientConsultFee: Swift.String?
  public var payeeClientPMPMFee: Swift.String?
  public var payeePatientConsultFee: Swift.String?
  public var payeePatientPMPMFee: Swift.String?
  public var payeePersonConsultFee: Swift.String?
  public var payeePersonPMPMFee: Swift.String?
  public var payeeResellerConsultFee: Swift.String?
  public var payeeResellerPMPMFee: Swift.String?
  public var payeeTotalConsultFee: Swift.String?
  public var planDurationTypeId: CovantexSDK.PlanDto.PlanDurationTypeId?
  public var planGroupId: Swift.String?
  public var planId: Swift.String?
  public var planType: Swift.String?
  public var pmpm: Swift.String?
  public var reseller: Swift.String?
  public var resellerId: Swift.String?
  public var resellerOrganizationId: Swift.String?
  public var resellerServiceType: Swift.String?
  public var resellerServices: [CovantexSDK.ResellerServicePlanDto]?
  public var revenueModels: [Swift.String]?
  public var services: Swift.String?
  public var totalConsultFee: Swift.String?
  public var totalPMPMFee: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum PlanDurationTypeId : Swift.String {
    case Monthly
    case Annual
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LicenseStateDto : ObjectMapper.Mappable, Swift.Codable {
  public var country: Swift.String?
  public var state: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PackageOfflineServiceDto : ObjectMapper.Mappable {
  public var offlineServiceId: Swift.String?
  public var packageId: Swift.String?
  public var packageOfflineServiceId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class MainServiceAuthenticator : Alamofire.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, using state: Alamofire.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  public func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: any Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
  @objc deinit
}
extension Alamofire.AFError {
  public var isTimeout: Swift.Bool {
    get
  }
}
public class ResponseDto<T> : ObjectMapper.Mappable where T : ObjectMapper.Mappable {
  public var data: T?
  public var dataArray: [T]?
  public var statusCode: Swift.Int?
  public var status: Swift.String?
  public var count: Swift.Int?
  public var errors: [CovantexSDK.ErrorDto]?
  public var events: [CovantexSDK.EventDto]?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public func isErrorFound() -> Swift.Bool
  public func getErrorCode() -> Swift.String
  public func getLocalisedErrorMessage() -> Swift.String
  @objc deinit
}
extension CovantexSDK.ResponseDto {
  public var signTermsId: Swift.String? {
    get
  }
  public var signStatementId: Swift.String? {
    get
  }
  public func isMemberNeedToSignTermsAndConditions() -> Swift.Bool
  public func isMemberNeedToSignMedicalRelease() -> Swift.Bool
  public func isMemberNeedToSignTermsAndConditions_and_MedicalRelease() -> Swift.Bool
  public func isMemberNeedToConfirmMhd() -> Swift.Bool
  public func isSessionValid() -> Swift.Bool
}
extension Swift.Sequence where Self.Element : Swift.Hashable {
  public func unique() -> [Self.Iterator.Element]
}
extension Swift.Collection where Self.Element : Swift.Hashable {
  public func unique() -> [Self.Iterator.Element]
  public func isNotEmpty() -> Swift.Bool
}
extension Swift.Array where Element : Swift.Hashable {
  public func unique() -> [Element]
}
extension Swift.Array where Element : Swift.BinaryInteger {
  public var sum: Element {
    get
  }
  public var average: Swift.Double {
    get
  }
}
extension Swift.Array where Element : Swift.BinaryFloatingPoint {
  public var sum: Element {
    get
  }
  public var average: Swift.Double {
    get
  }
}
extension Swift.Array {
  public mutating func appendAtBeginning(newItem: Element)
  public func isNotEmpty() -> Swift.Bool
}
public struct EncounterItemDto : ObjectMapper.Mappable {
  public var acceptedById: Swift.String?
  public var acceptedOn: Foundation.Date?
  public var accessCode: Swift.String?
  public var activatedById: Swift.String?
  public var activatedOn: Foundation.Date?
  public var assessment: Swift.String?
  public var bestContact: Swift.String?
  public var bestContactName: Swift.String?
  public var billedTo: Swift.String?
  public var caregiverConsultFee: Swift.Double?
  public var caregiverId: Swift.String?
  public var caregiverName: Swift.String?
  public var caregiverTTR: Swift.Int?
  public var chiefComplaint: Swift.String?
  public var clientName: Swift.String?
  public var clientOrganizationId: Swift.String?
  public var closedById: Swift.String?
  public var closedOn: Foundation.Date?
  public var consultDuration: Swift.Int?
  public var country: Swift.String?
  public var date: Foundation.Date?
  public var description: Swift.String?
  public var durationPhysicianCall: Swift.Int?
  public var encounterId: Swift.String?
  public var encounterOrders: Swift.String?
  public var encounterRequestStatusId: Swift.Int?
  public var encounterStatus: CovantexSDK.EncounterItemDto.EncounterStatus?
  public var encounterStatusId: Swift.Int?
  public var expressOrderId: Swift.String?
  public var gender: Swift.String?
  public var insuranceCompanyName: Swift.String?
  public var insuranceNames: Swift.String?
  public var isAllergyOrders: Swift.Bool?
  public var isCgxOrders: Swift.Bool?
  public var isCompoundRxOrders: Swift.Bool?
  public var isDmeOrders: Swift.Bool?
  public var isGsidOrders: Swift.Bool?
  public var isHrtOrders: Swift.Bool?
  public var isPgxOrders: Swift.Bool?
  public var isRx: Swift.Bool?
  public var isSrxOrders: Swift.Bool?
  public var lastStatusOn: Foundation.Date?
  public var memberConsultFee: Swift.Double?
  public var memberRole: Swift.String?
  public var memberSince: Swift.Double?
  public var memberStatus: Swift.String?
  public var organizationId: Swift.String?
  public var organizationName: Swift.String?
  public var patientAge: Swift.String?
  public var patientAgeYears: Swift.Int?
  public var patientEmail: Swift.String?
  public var patientId: Swift.String?
  public var patientName: Swift.String?
  public var patientNoShow: Swift.Bool?
  public var paymentStatusCode: Swift.String?
  public var physicianCallEnd: Foundation.Date?
  public var physicianCallStart: Foundation.Date?
  public var planId: Swift.String?
  public var requestedById: Swift.String?
  public var requestedByName: Swift.String?
  public var requestedMedicalItems: Swift.String?
  public var resellerName: Swift.String?
  public var resellerOrganizationId: Swift.String?
  public var resellerServices: Swift.String?
  public var resolution: Swift.String?
  public var scheduledByEnd: Foundation.Date?
  public var scheduledById: Swift.String?
  public var scheduledByName: Swift.String?
  public var scheduledByStartTimeSpan: Swift.String?
  public var scheduledOn: Foundation.Date?
  public var state: Swift.String?
  public var statusOn: Foundation.Date?
  public var timeZone: Swift.String?
  public var totalCharges: Swift.Double?
  public var totalPayments: Swift.Double?
  public var totalTime: Swift.Int?
  public var treatmentPlan: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum EncounterStatus : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct AddressDto : ObjectMapper.Mappable, Swift.Codable {
  public var addressId: Swift.String?
  public var countryId: Swift.String?
  public var stateId: Swift.String?
  public var city: Swift.String?
  public var zipCode: Swift.String?
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var latitude: Swift.Double?
  public var longitude: Swift.Double?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.AddressDto {
  public func getAddressWithDetails() -> Swift.String
  public func getAddressWithZipcode_State_City() -> Swift.String
  public func getAddressWithZipcode_State_City_Format2() -> Swift.String
}
public struct DictionaryModel : ObjectMapper.Mappable {
  public typealias Item = (key: Swift.String, value: Swift.String)
  public var items: [CovantexSDK.DictionaryModel.Item]
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class SDKKeychain {
  public func getDeviceAdvertisingId() -> Swift.String
  public struct SignInWithAppleDetails : Swift.Codable {
    public var userId: Swift.String!
    public var email: Swift.String!
    public var firstName: Swift.String!
    public var lastName: Swift.String!
    public var fullName: Swift.String!
    public init()
    public init(userId: Swift.String!, email: Swift.String!, firstName: Swift.String!, lastName: Swift.String!, fullName: Swift.String!)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func saveSignInWithAppleDetails(_ details: CovantexSDK.SDKKeychain.SignInWithAppleDetails)
  public static func getSignInWithAppleDetails(_ userId: Swift.String) -> CovantexSDK.SDKKeychain.SignInWithAppleDetails?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PaymentDialog {
  public static let shared: CovantexSDK.PaymentDialog
  public func initPaymentAuthorization(usingPatientId patientId: Swift.String, payableAmount: Swift.Double, paymentMethodId: Swift.String = "", paymentSystem: CovantexSDK.EnvironmentFlagsDto.UsedPaymentSystem, presentUIonController: UIKit.UIViewController, updateLoaderStatus: @escaping (_ isShowLoader: Swift.Bool) -> Swift.Void, onSuccess: @escaping (_ paymentAuthorizationDto: CovantexSDK.PaymentAuthorizationDto, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ message: Swift.String) -> Swift.Void)
  @objc deinit
}
public struct VendorMedicalItemDto : ObjectMapper.Mappable {
  public var vendorMedicalItemId: Swift.String?
  public var medicalItemId: Swift.String?
  public var vendorId: Swift.String?
  public var isPrivate: Swift.Bool?
  public var vendorName: Swift.String?
  public var name: Swift.String?
  public var medicalItemGroup: Swift.String?
  public var medicalItemClassification: Swift.String?
  public var form: Swift.String?
  public var strength: Swift.String?
  public var quantity: Swift.String?
  public var sig: Swift.String?
  public var description: Swift.String?
  public var refills: Swift.String?
  public var deviceType: Swift.String?
  public var size: Swift.String?
  public var hcpcsCode: Swift.String?
  public var location: Swift.String?
  public var icdCodes: Swift.String?
  public var labTestName: Swift.String?
  public var labTestOption: Swift.String?
  public var specimenType: Swift.String?
  public var hgvs: Swift.String?
  public var gene: Swift.String?
  public var loinc: Swift.String?
  public var groupDefaultMedicalItem: Swift.Bool?
  public var resellerServiceType: Swift.String?
  public var resellerServiceName: Swift.String?
  public var isSelected: Swift.Bool
  public var isEnable: Swift.Bool
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PatientTermsAndConditionsDto : ObjectMapper.Mappable {
  public var PatientId: Swift.String?
  public var ResellerId: Swift.String?
  public var Text: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class LinkShortenerService {
  public static let shared: CovantexSDK.LinkShortenerService
  public func url(_ baseUrl: CovantexSDK.LinkShortenerService.baseUrl) -> Swift.String
  public enum baseUrl {
    case shortlinks
    case base
    public static func == (a: CovantexSDK.LinkShortenerService.baseUrl, b: CovantexSDK.LinkShortenerService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getToken(_ shortLink: Swift.String) -> Swift.String
  public func getOriginalLink(shortToken: Swift.String, onSuccess: @escaping ((_ response: Foundation.NSDictionary) -> Swift.Void), onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createShortlink(originalLink: Swift.String, callToken: Swift.String? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.LinkDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct MhdTypeDto : ObjectMapper.Mappable {
  public var group: Swift.String?
  public var id: Swift.String?
  public var name: Swift.String?
  public var memberRole: Swift.String?
  public var options: [Swift.String]?
  public var type: Swift.String?
  public var valueExpLevel1Minutes: Swift.Int?
  public var valueExpLevel2Minutes: Swift.Int?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public class CovidScreeningDto : ObjectMapper.Mappable {
  public var name: Swift.String?
  public var required: Swift.Bool?
  public var section: Swift.String?
  public var title: Swift.String?
  public var type: Swift.String?
  public var redFlag: Any?
  public var placeholder: Swift.String?
  public var minValue: Swift.String?
  public var maxValue: Swift.String?
  public var expression: Swift.String?
  public var unit: Swift.String?
  public var metric: Swift.Bool?
  public var value: Any?
  public var subSection: Swift.String?
  public var lookup: [CovantexSDK.CovidScreeningLookupDto]?
  public var fieldClass: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public struct ErrorResponseDto : ObjectMapper.Mappable {
  public var statusCode: Swift.Int?
  public var status: Swift.String?
  public var errors: [CovantexSDK.ErrorDto]?
  public var events: [CovantexSDK.EventDto]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct MeetingDto : ObjectMapper.Mappable {
  public var caregiverId: Swift.String?
  public var caregiverJoined: Swift.Bool?
  public var encounterId: Swift.String?
  public var joinUrl: Swift.String?
  public var meetingId: Swift.String?
  public var patientJoined: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension Foundation.Date {
  public func difference() -> Foundation.DateComponents
  public func addComponentsToDate(seconds sec: Swift.Int, minutes min: Swift.Int, hours hrs: Swift.Int, days d: Swift.Int, weeks wks: Swift.Int, months mts: Swift.Int, years yrs: Swift.Int) -> Foundation.Date
  public func secondsInBetweenDate(_ date: Foundation.Date) -> Swift.Double
  public var removeSeconds: Foundation.Date? {
    get
  }
}
public struct PatientItemDto : ObjectMapper.Mappable {
  public var accessCode: Swift.String?
  public var accessCodeId: Swift.String?
  public var bestContact: Swift.String?
  public var bestContactName: Swift.String?
  public var dob: Swift.String?
  public var email: Swift.String?
  public var firstName: Swift.String?
  public var lastContactOn: Swift.String?
  public var lastName: Swift.String?
  public var memberRole: Swift.String?
  public var memberSince: Swift.String?
  public var mhd: Swift.Bool?
  public var organization: Swift.String?
  public var organizationId: Swift.String?
  public var patientId: Swift.String?
  public var status: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct BusinessLogicResponseDto : ObjectMapper.Mappable {
  public var name: Swift.String?
  public var result: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PatientCouponDto : ObjectMapper.Mappable, Swift.Codable {
  public var amountLeft: Swift.Double?
  public var amountPercent: Swift.Double?
  public var couponCode: Swift.String?
  public var couponId: Swift.String?
  public var couponName: Swift.String?
  public var enabled: Swift.Bool?
  public var patientCouponId: Swift.String?
  public var patientId: Swift.String?
  public var planId: Swift.String?
  public var freeServices: Swift.Int?
  public var couponHowToRedeem: Swift.String?
  public var expiration: Foundation.Date?
  public var couponFileId: Swift.String?
  public var couponDescription: Swift.String?
  public var unlimitedDuration: Swift.Bool?
  public var offlineServiceId: Swift.String?
  public var patientPackageId: Swift.String?
  public var couponType: CovantexSDK.PatientCouponDto.ECouponType?
  public var couponActionText: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum ECouponType : Swift.String, Swift.Codable {
    case Services
    case Amount
    case Percent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var isOfflineService: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.DeviceDataDto {
  public mutating func autoFillDeviceData(_appLanguage: Swift.String = "", _appLoggedInUserId: Swift.String = "", _appDeviceToken: Swift.String = "", _appVoipToken: Swift.String = "")
}
@_hasMissingDesignatedInitializers public class DeviceInfoProvider {
  public static var shared: CovantexSDK.DeviceInfoProvider
  public func update(appLanguage: Swift.String = "", appLoggedInUserId: Swift.String = "", appDeviceToken: Swift.String = "", appVoipToken: Swift.String = "")
  public func getAppName() -> Swift.String
  public func getAppVersion() -> Swift.String
  public func getAppBuild() -> Swift.String
  public func getAppVersionWithBuildNumber() -> Swift.String
  public func getAppNameWithVersion() -> Swift.String
  public func getAppNameWithVersionandBuildNumber() -> Swift.String
  public func getAppIdentifier() -> Swift.String
  public func getAppLanguage() -> Swift.String
  public func getApiKey() -> Swift.String
  public func getApiUserRole() -> Swift.String
  public func getApiUrl() -> Swift.String
  public func getApiEnv() -> Swift.String
  public func getPermissionCamera() -> Swift.Bool
  public func getPermissionMic() -> Swift.Bool
  public func getPermissionNotification() -> Swift.Bool
  public func getDeviceName() -> Swift.String
  public func getDeviceManufacturer() -> Swift.String
  public func getDeviceTimeZone() -> Swift.String
  public func getDeviceLanguage() -> Swift.String
  public func getDeviceRingMode() -> CovantexSDK.DeviceDataDto.DeviceRingMode
  public func getDeviceVersion() -> Swift.String
  public func getDeviceIdentifier() -> Swift.String
  public func getDeviceToken() -> Swift.String
  public func getDeviceVoIPToken() -> Swift.String
  public func getProcessor() -> Swift.String
  public func getCpuType() -> Swift.String
  public func getCores() -> Swift.String
  public func getCpuFrequency() -> Swift.String
  public func getSupportedABIs() -> Swift.String
  public func getOsName() -> Swift.String
  public func getOsVersion() -> Swift.String
  public func getInternet() -> Swift.String
  public func getOrientation() -> Swift.String
  public func getResolution() -> Swift.String
  public func getDensity() -> Swift.Double
  public func getWifiStandard() -> Swift.String
  public func getBluetoothVersion() -> Swift.String
  public func getGooglePlayService() -> Swift.String
  public func getRAM() -> Swift.String
  public func getVolumeTotalCapacity() -> Swift.String
  public func getVolumeAvailableCapacity() -> Swift.String
  public func getVolumeAvailableCapacityForImportantUsage() -> Swift.String
  public func getVolumeAvailableCapacityForOpportunisticUsage() -> Swift.String
  public func getBatteryLevel() -> Swift.Int
  public func getThermalState() -> Swift.String
  public func getLowPowerMode() -> Swift.Bool
  public func getIsBatteryMonitoringEnabled() -> Swift.Bool
  public func getBatteryDescription() -> Swift.String
  @objc deinit
}
extension CovantexSDK.DeviceInfoProvider {
  public struct Units {
    public let bytes: Swift.Int64
    public var kilobytes: Swift.Double {
      get
    }
    public var megabytes: Swift.Double {
      get
    }
    public var gigabytes: Swift.Double {
      get
    }
    public init(bytes: Swift.Int64)
    public func getReadableUnit() -> Swift.String
  }
}
public class CaregiverDto : ObjectMapper.Mappable, Swift.Codable, Swift.Equatable, Swift.Hashable {
  public static func == (left: CovantexSDK.CaregiverDto, right: CovantexSDK.CaregiverDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var id: Swift.String?
  public var address: CovantexSDK.AddressDto?
  public var agreedToActiveTermsAndConditions: Swift.Bool?
  public var bestContactNumberId: CovantexSDK.CaregiverDto.BestContactNumberId?
  public var bio: Swift.String?
  public var caregiverId: Swift.String?
  public var cellPhone: Swift.String?
  public var consultBlock: Swift.Int?
  public var consultBundle: Swift.String?
  public var consultFeeFixed: Swift.Double?
  public var consultFeeRatio: Swift.Double?
  public var credentials: [CovantexSDK.FileDto]?
  public var dea: Swift.Double?
  public var dob: Foundation.Date?
  public var email: Swift.String?
  public var employerId: Swift.String?
  public var ethnicityId: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var fullName: Swift.String?
  public var genderId: Swift.String?
  public var homePhone: Swift.String?
  public var ip: Swift.String?
  public var isPartnerMD: Swift.Bool?
  public var lastConsult: Foundation.Date?
  public var lastConsultDate: Foundation.Date?
  public var lastName: Swift.String?
  public var lastPatient: Swift.String?
  public var licenseStates: [CovantexSDK.LicenseStateDto]?
  public var maritalStatusId: Swift.String?
  public var medicaidId: Swift.String?
  public var memberSince: Foundation.Date?
  public var middleName: Swift.String?
  public var mobileAppSMSSent: Swift.Bool?
  public var mobilePhone: Swift.String?
  public var mobileVisited: Swift.Bool?
  public var npiNumber: Swift.String?
  public var officeHours: Swift.String?
  public var organizations: [Swift.String]?
  public var password: Swift.String?
  public var passwordResetNeeded: Swift.Bool?
  public var pecosCertified: Swift.String?
  public var personId: Swift.String?
  public var photos: [CovantexSDK.PhotoDto]?
  public var preferredLanguage: Swift.String?
  public var primaryEmployerId: Swift.String?
  public var professionalTitle: Swift.String?
  public var profileImageId: Swift.String?
  public var providerNetworkCaregivers: [Swift.String]?
  public var providerNetworks: [Swift.String]?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public var resellerServices: [CovantexSDK.CaregiverResellerServiceDto]?
  public var securityQuestions: [CovantexSDK.SecurityQuestionDto]?
  public var signatureImageId: Swift.String?
  public var skypeId: Swift.String?
  public var specialities: [Swift.String]?
  public var ssn: Swift.String?
  public var statusId: CovantexSDK.CaregiverDto.StatusId?
  public var timeZone: Swift.String?
  public var totalConsults: Swift.Int?
  public var totalStates: Swift.Int?
  public var typeId: Swift.String?
  public var userName: Swift.String?
  public var vmrConnectionSpeed: Swift.String?
  public var vmrId: Swift.String?
  public var vmrPIN: Swift.String?
  public var workEmail: Swift.String?
  public var workPhone: Swift.String?
  public var zoomUserId: Swift.String?
  public var slots: [Foundation.Date]?
  public var memberConsultFee: Swift.Double?
  public var age: Swift.Int?
  public var city: Swift.String?
  public var state: Swift.String?
  public var zipCode: Swift.String?
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var online: Swift.Bool?
  public var lastConsultAcceptedOn: Foundation.Date?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum BestContactNumberId : Swift.String, Swift.Codable {
    case Mobile
    case Home
    case Work
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StatusId : Swift.String, Swift.Codable {
    case Registered
    case InReview
    case ReviewCompleted
    case Inactive
    case Active
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.CaregiverDto {
  public var name: Swift.String {
    get
  }
  public func isMaleGender() -> Swift.Bool?
  public func isFemaleGender() -> Swift.Bool?
  public func hasProfileImage() -> Swift.Bool
  public var bestContactNumber: Swift.String? {
    get
  }
}
public struct OfflineServiceDto : ObjectMapper.Mappable {
  public var description: Swift.String?
  public var name: Swift.String?
  public var offlineServiceId: Swift.String?
  public var price: Swift.Double?
  public var resellerId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterDiagnosisDto : ObjectMapper.Mappable {
  public var active: Swift.Bool?
  public var diagnosis: Swift.String?
  public var encounterDiagnosisId: Swift.String?
  public var role: Swift.String?
  public var userId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension ObjectMapper.Mappable {
  public mutating func updateDto<T>(using model: T) where T : ObjectMapper.Mappable
}
@objc @_inheritsConvenienceInitializers public class ModelManager : ObjectiveC.NSObject {
  public static let shared: CovantexSDK.ModelManager
  @objc override dynamic public init()
  @objc deinit
}
extension CovantexSDK.ModelManager {
  public func getDTO<T>(any: Any, type: T.Type) -> T? where T : ObjectMapper.Mappable
  public func getDTOArray<T>(_ arrData: Any, type: [T].Type) -> [T]? where T : ObjectMapper.Mappable
}
extension CovantexSDK.ModelManager {
  public func getDTOArray<T>(_ arrData: Foundation.NSArray) -> [T] where T : ObjectMapper.Mappable
  public func getDTO<T>(data: Any) -> CovantexSDK.ResponseDto<T>? where T : ObjectMapper.Mappable
  public func getDTO<T>(_ data: Foundation.Data) -> T? where T : ObjectMapper.Mappable
  public func getDTO<T>(_ jsonString: Swift.String) -> T? where T : ObjectMapper.Mappable
  public func getDTO<T>(_ jsonString: Swift.String, type: T.Type) -> T? where T : ObjectMapper.Mappable
  public func getDTO<T>(dict: [Swift.String : Any], type: T.Type) -> T? where T : ObjectMapper.Mappable
}
public struct PrimaryCarePhysicianDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var caregiverId: Swift.String?
  public var city: Swift.String?
  public var classification: Swift.String?
  public var country: Swift.String?
  public var credential: Swift.String?
  public var dob: Foundation.Date?
  public var firstName: Swift.String?
  public var gender: Swift.String?
  public var homePhone: Swift.String?
  public var lastName: Swift.String?
  public var licenseNumber: Swift.String?
  public var licenseNumberState: Swift.String?
  public var licenseNumberStateId: Swift.String?
  public var mailingAddress: CovantexSDK.AddressDto?
  public var mailingAddress1: Swift.String?
  public var mailingAddress2: Swift.String?
  public var mailingCity: Swift.String?
  public var mailingCountry: Swift.String?
  public var mailingFax: Swift.String?
  public var mailingPhone: Swift.String?
  public var mailingState: Swift.String?
  public var mailingZipCode: Swift.String?
  public var medicaidId: Swift.String?
  public var middleName: Swift.String?
  public var mobilePhone: Swift.String?
  public var namePrefix: Swift.String?
  public var nameSuffix: Swift.String?
  public var npi: Swift.String?
  public var npiDeactivationDate: Swift.String?
  public var npiDeactivationReasonCode: Swift.String?
  public var npiReactivationDate: Swift.String?
  public var organizationName: Swift.String?
  public var pcpId: Swift.String?
  public var physicianId: Swift.String?
  public var professionalTitle: Swift.String?
  public var profileImageId: Swift.String?
  public var skypeId: Swift.String?
  public var specialization: Swift.String?
  public var specialty: Swift.String?
  public var state: Swift.String?
  public var type: Swift.String?
  public var workEmail: Swift.String?
  public var workFax: Swift.String?
  public var workPhone: Swift.String?
  public var zipCode: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
extension Foundation.NSString {
  public func mimeType() -> Swift.String
}
extension Swift.String {
  public func mimeType() -> Swift.String
}
@objc @_inheritsConvenienceInitializers public class MainService : ObjectiveC.NSObject {
  public static let shared: CovantexSDK.MainService
  public func url(_ baseUrl: CovantexSDK.MainService.baseUrl) -> Swift.String
  public enum baseUrl {
    case accessCodes
    case pharmacyStores
    public static func == (a: CovantexSDK.MainService.baseUrl, b: CovantexSDK.MainService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func signIn(body: CovantexSDK.SignInDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.SessionDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func checkIfSessionActive(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.SessionDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func signOut(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.DictionaryModel>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEnvironmentFlags(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EnvironmentFlagsDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEnums(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EnumDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getUserDevices(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserDeviceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addUserDevice(body: CovantexSDK.UserDeviceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserDeviceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteUserDevice(userDeviceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserDeviceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createOAuthRequest(body: CovantexSDK.OAuthDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.OAuthDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getRegistration(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationPatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func register(body: CovantexSDK.RegistrationPatientDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationsResponseDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateRegistration(id: Swift.String, body: CovantexSDK.RegistrationPatientDto, isRegistrationFinish: Swift.Bool = false, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationPatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func finishRegistration(id: Swift.String, body: CovantexSDK.RegistrationPatientDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationPatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteRegistration(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationPatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatients(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatient(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePatient(id: Swift.String, body: CovantexSDK.PatientDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPaymentAuthorization(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentAuthorizationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createPaymentAuthorization(body: CovantexSDK.PaymentAuthorizationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentAuthorizationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePaymentAuthorization(id: Swift.String, body: CovantexSDK.PaymentAuthorizationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentAuthorizationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounter(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounters(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addEncounter(body: CovantexSDK.EncounterDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEncounter(id: Swift.String, body: CovantexSDK.EncounterDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEncounterStatus(encounterId: Swift.String, body: CovantexSDK.EncounterStatusDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterStatusDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterNotes(encounterId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterNoteDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addEncounterNote(body: CovantexSDK.EncounterNoteDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterNoteDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEncounterNote(id: Swift.String, body: CovantexSDK.EncounterNoteDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterNoteDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createPasswordRecovery(body: CovantexSDK.PasswordRecoveryRequestDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PasswordRecoveryDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func confirmPasswordRecovery(userId: Swift.String, body: CovantexSDK.PasswordRecoveryConfirmationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PasswordRecoveryConfirmationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func checkAccessCode(code: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AccessCodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPlans(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPlan(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPaymentMethods(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentMethodDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPaymentMethod(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentMethodDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPaymentMethod(body: CovantexSDK.PaymentMethodDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentMethodDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePaymentMethod(id: Swift.String, body: CovantexSDK.PaymentMethodDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentMethodDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePaymentMethod(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PaymentMethodDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func doPreregistration(body: CovantexSDK.PreregistrationVerificationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PreregistrationVerificationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func doVerification(personId: Swift.String, body: CovantexSDK.PreregistrationVerificationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PreregistrationVerificationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getMedications(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MedicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getMedication(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MedicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addMedication(body: CovantexSDK.MedicationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MedicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateMedication(id: Swift.String, body: CovantexSDK.MedicationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MedicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteMedication(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MedicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPlanCaregiverOptions(patientId: Swift.String, from: Swift.String, to: Swift.String, includeSlots: Swift.Bool = false, planId: Swift.String? = nil, country: Swift.String? = nil, state: Swift.String? = nil, resellerServiceType: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPlanSlots(planId: Swift.String, country: Swift.String? = nil, state: Swift.String? = nil, resellerServiceType: Swift.String? = nil, from: Swift.String, to: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PlanSlotDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregivers(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiver(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, isOnlineOfflineStatusNeeded: Swift.Bool? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateCaregiver(id: Swift.String, body: CovantexSDK.CaregiverDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterFiles(encounterId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterFile(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addEncounterFile(body: CovantexSDK.EncounterFileDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEncounterFile(id: Swift.String, body: CovantexSDK.EncounterFileDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteEncounterFile(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientPlans(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalReportRequests(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalReportRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalReportRequest(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalReportRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addVitalReportRequest(body: CovantexSDK.VitalReportRequestDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalReportRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalReport(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalReportDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitals(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addVital(body: CovantexSDK.VitalDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateVital(id: Swift.String, body: CovantexSDK.VitalDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteVital(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalTypes(memberId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalTypeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalType(id: Swift.String, memberId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalTypeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalValues(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalValues(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getVitalValues(patientId: Swift.String, latestOnly: Swift.Bool = true, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addVitalValue(body: CovantexSDK.VitalValueDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteVitalValue(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.VitalValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getMhd(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addMhd(body: CovantexSDK.MhdDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateMhd(id: Swift.String, body: CovantexSDK.MhdDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getMhdTypes(memberId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdTypeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getMhdValues(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addMhdValue(body: CovantexSDK.MhdValueDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteMhdValue(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.MhdValueDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientInsuranceCompanies(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientInsuranceCompanyDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPatientInsuranceCompany(body: CovantexSDK.PatientInsuranceCompanyDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientInsuranceCompanyDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePatientInsuranceCompany(id: Swift.String, body: CovantexSDK.PatientInsuranceCompanyDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientInsuranceCompanyDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePatientInsuranceCompany(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientInsuranceCompanyDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPharmacyStores(country: Swift.String? = nil, zipcode: Swift.String? = nil, name: Swift.String? = nil, state: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PharmacyStoreDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPharmacyStore(id: Swift.String, country: Swift.String? = nil, zipcode: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PharmacyStoreDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPharmacyStore(body: CovantexSDK.PharmacyStoreDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PharmacyStoreDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePharmacyStore(id: Swift.String, body: CovantexSDK.PharmacyStoreDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PharmacyStoreDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEpisodes(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EpisodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEpisode(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EpisodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addEpisode(body: CovantexSDK.EpisodeDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EpisodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEpisode(id: Swift.String, body: CovantexSDK.EpisodeDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EpisodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCommunicationParticipants(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ParticipantDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCommunicationParticipant(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ParticipantDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addCommunicationParticipant(body: CovantexSDK.ParticipantDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, callToken: Swift.String? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ParticipantDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateCommunicationParticipant(id: Swift.String, body: CovantexSDK.ParticipantDto, callToken: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ParticipantDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getStatement(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.StatementDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addStatement(body: CovantexSDK.StatementDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.StatementDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getTermsAndCondition(id: Swift.String, body: CovantexSDK.TermsAndConditionsStatementDto, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.TermsAndConditionsStatementDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getTermsAndConditions(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.TermsAndConditionsStatementDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addTermsAndCondition(body: CovantexSDK.TermsAndConditionsStatementDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.TermsAndConditionsStatementDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiversTermsAndConditions(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.TermsAndConditionsCaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addCaregiversTermsAndCondition(body: CovantexSDK.TermsAndConditionsCaregiverDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.TermsAndConditionsCaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPlanPatientFees(planId: Swift.String, patientId: Swift.String, patientCouponId: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PlanPatientFeesDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientCoupons(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getReseller(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ResellerDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getWaitingRooms(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func uploadFile(fileName: Swift.String, fileData: Foundation.Data, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.FileDto>>, inProgress: CovantexSDK.inProgressHandler? = nil, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientCaregivers(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiverScheduleSlots(caregiverId: Swift.String, resellerId: Swift.String? = nil, startTime: Swift.String? = nil, endTime: Swift.String? = nil, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PlanSlotDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterOrderFiles(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileItemDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterOrderFile(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addEncounterOrderFile(body: CovantexSDK.EncounterOrderFileDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateEncounterOrderFile(id: Swift.String, body: CovantexSDK.EncounterOrderFileDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteEncounterOrderFile(id: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterOrder(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCommunication(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CommunicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createCommunication(body: CovantexSDK.CommunicationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CommunicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateCommunication(id: Swift.String, body: CovantexSDK.CommunicationDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CommunicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getConsultRequests(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ConsultRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getConsultRequest(id: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ConsultRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addConsultRequest(body: CovantexSDK.ConsultRequestDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ConsultRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateConsultRequest(id: Swift.String, body: CovantexSDK.ConsultRequestUpdateDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ConsultRequestUpdateDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createAuthenticationFactorRequest(body: CovantexSDK.AuthenticationFactorRequestDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AuthenticationFactorRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateAuthenticationFactorRequest(id: Swift.String, body: CovantexSDK.AuthenticationFactorRequestDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AuthenticationFactorRequestDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getAuthenticationFactors(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AuthenticationFactorDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackageCoupons(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackageCoupon(packageCouponId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPackageCoupon(body: CovantexSDK.PackageCouponDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePackageCoupon(packageCouponId: Swift.String, body: CovantexSDK.PackageCouponDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePackageCoupon(packageCouponId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageCouponDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackageOfflineServices(packageId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackageOfflineService(packageOfflineServiceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPackageOfflineService(body: CovantexSDK.PackageOfflineServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePackageOfflineService(packageOfflineServiceId: Swift.String, body: CovantexSDK.PackageOfflineServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePackageOfflineService(packageOfflineServiceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackagePlans(packageId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackagePlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackagePlan(packagePlanId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackagePlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPackagePlan(body: CovantexSDK.PackagePlanDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackagePlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePackagePlan(packagePlanId: Swift.String, body: CovantexSDK.PackagePlanDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackagePlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePackagePlan(packagePlanId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackagePlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackages(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackage(packageId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPackage(body: CovantexSDK.PackageDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePackage(packageId: Swift.String, body: CovantexSDK.PackageDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getRegistrationPackages(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getOfflineServices(_ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.OfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getOfflineService(offlineServiceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.OfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addOfflineService(body: CovantexSDK.OfflineServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.OfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateOfflineService(offlineServiceId: Swift.String, body: CovantexSDK.OfflineServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.OfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPatientOfflineService(body: CovantexSDK.PatientOfflineServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientOfflineServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientPackages(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientPackage(patientPackageId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addPatientPackage(body: CovantexSDK.PatientPackageDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePatientPackage(patientPackageId: Swift.String, body: CovantexSDK.PatientPackageDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deletePatientPackage(patientPackageId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientPackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientTermsAndCondition(patientId: Swift.String, planId: Swift.String, state: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientTermsAndConditionsDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPatientActivityStatuses(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientActivityStatusDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterCommunication(communicationId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CommunicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func createEncounterCommunication(encounterId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CommunicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func sendAuthorizationCode(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AuthorizationCodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func verifyAuthorizationCode(body: CovantexSDK.AuthorizationCodeDto, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.AuthorizationCodeDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCurrentApplication(onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ApplicationDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getUserProfileFiles(userId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserProfileFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addUserProfileFile(fileContentType: Swift.String, fileId: Swift.String, userId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserProfileFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateUserProfileFile(userProfileFileId: Swift.String, body: CovantexSDK.UserProfileFileDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserProfileFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteUserProfileFile(userProfileFileId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserProfileFileDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiverWorkWindows(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverWorkWindowDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addCaregiverWorkWindow(body: CovantexSDK.CaregiverWorkWindowDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverWorkWindowDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateCaregiverWorkWindow(caregiverWorkWindowId: Swift.String, body: CovantexSDK.CaregiverWorkWindowDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverWorkWindowDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteCaregiverWorkWindow(caregiverWorkWindowId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverWorkWindowDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiverServices(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverResellerServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getCaregiverService(caregiverResellerServiceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverResellerServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addCaregiverService(resellerServiceId: Swift.String, body: CovantexSDK.CaregiverResellerServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverResellerServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateCaregiverService(caregiverResellerServiceId: Swift.String, body: CovantexSDK.CaregiverResellerServiceDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverResellerServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteCaregiverService(caregiverResellerServiceId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverResellerServiceDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getProviderNetworksOfCaregiver(caregiverId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ProviderNetworkCaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addProviderNetworkToCaregiver(caregiverId: Swift.String, body: CovantexSDK.ProviderNetworkCaregiverDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ProviderNetworkCaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func deleteProviderNetworkOfCaregiver(providerNetworkCaregiverId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.ProviderNetworkCaregiverDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getEncounterFlags(encounterId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.BusinessLogicResponseDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getAssessment(assessmentId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterAssessmentDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateAssessment(assessmentId: Swift.String, body: CovantexSDK.EncounterAssessmentDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterAssessmentDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addAssessment(encounterId: Swift.String, body: CovantexSDK.EncounterAssessmentDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterAssessmentDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getTreatmentPlan(treatmentPlanId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterTreatmentPlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updateTreatmentPlan(treatmentPlanId: Swift.String, body: CovantexSDK.EncounterTreatmentPlanDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterTreatmentPlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func addTreatmentPlan(encounterId: Swift.String, body: CovantexSDK.EncounterTreatmentPlanDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterTreatmentPlanDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public class APISettings : Swift.Codable, ObjectMapper.Mappable {
  public var mode: CovantexSDK.APISettings.APIEnvironmentType
  public var mainServiceApiKey: Swift.String
  public var mainServiceBaseUrl: Swift.String
  public var physiciansServiceBaseUrl: Swift.String
  public var insuranceServiceBaseUrl: Swift.String
  public var stringsServiceBaseUrl: Swift.String
  public var zipcodesServiceBaseUrl: Swift.String
  public var covidServiceBaseUrl: Swift.String
  public var vendorsServiceBaseUrl: Swift.String
  public var xenditServiceBaseUrl: Swift.String
  public var portalUrl: Swift.String
  public var statusServiceBaseUrl: Swift.String
  public var linkShortenerServiceBaseUrl: Swift.String
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum APIEnvironmentType : Swift.String, Swift.Codable {
    case dev
    case alpha
    case beta
    case staging
    case production
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.APISettings {
  public var mainServiceHost: Swift.String {
    get
  }
}
public struct PatientInsuranceCompanyDto : ObjectMapper.Mappable, Swift.Codable {
  public var bin: Swift.String?
  public var coverageStartDate: Foundation.Date?
  public var groupId: Swift.String?
  public var insuranceCardBack: Swift.String?
  public var insuranceCardFront: Swift.String?
  public var insuranceCompanyId: Swift.String?
  public var insuranceCompanyName: Swift.String?
  public var insuranceCompanyRoleId: CovantexSDK.PatientInsuranceCompanyDto.InsuranceCompanyRoleId?
  public var insurancePhoneNumber: Swift.String?
  public var insuredDOB: Foundation.Date?
  public var memberId: Swift.String?
  public var nameOfInsured: Swift.String?
  public var patientId: Swift.String?
  public var patientInsuranceCompanyId: Swift.String?
  public var patientName: Swift.String?
  public var pcn: Swift.String?
  public var policyId: Swift.String?
  public var primaryRxDrugCardNumber: Swift.String?
  public var relationshipToPatientId: CovantexSDK.PatientInsuranceCompanyDto.RelationshipToPatientId?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum InsuranceCompanyRoleId : Swift.String, Swift.Codable {
    case Primary
    case Supplemental
    case SecondaryHealth
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RelationshipToPatientId : Swift.String, Swift.Codable {
    case Primary
    case Dependent
    case Spouse
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PhotoDto : ObjectMapper.Mappable, Swift.Codable {
  public var description: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileStoragePlace: Swift.String?
  public var fileType: Swift.String?
  public var id: Swift.String?
  public var storageFileName: Swift.String?
  public var url: Swift.String?
  public var videoLength: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VitalDto : ObjectMapper.Mappable {
  public var bpDiastolic: Swift.Int?
  public var bpSystolic: Swift.Int?
  public var patientHeight: Swift.Double?
  public var patientId: Swift.String?
  public var patientWeight: Swift.Double?
  public var pulse: Swift.Int?
  public var temperature: Swift.Double?
  public var vitalId: Swift.String?
  public var vitalsDateTimeStamp: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct SessionDto : ObjectMapper.Mappable {
  public var loginToken: Swift.String?
  public var roles: [Swift.String]?
  public var sessionStatus: Swift.String?
  public var token: Swift.String?
  public var userId: Swift.String?
  public var userDeviceId: Swift.String?
  public var expirationTime: Foundation.Date?
  public var active: Swift.Bool?
  public var timeLeft: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.SessionDto {
  public var role: Swift.String {
    get
  }
}
public struct AuthenticationFactorDto : ObjectMapper.Mappable {
  public var detail: Swift.String?
  public var type: CovantexSDK.AuthenticationFactorDto.Type_?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum Type_ : Swift.String {
    case GoogleAuthenticator
    case SmsAuthenticator
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public class PaymentMethodDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var bankAccountDriversLicense: Swift.String?
  public var bankAccountName: Swift.String?
  public var bankAccountNumber: Swift.String?
  public var bankAccountRoutingNumber: Swift.String?
  public var cardExpMonth: Swift.Int?
  public var cardExpYear: Swift.Int?
  public var cardNumber: Swift.String?
  public var cardTypeId: Swift.String?
  public var company: Swift.String?
  public var cvv: Swift.String?
  public var description: Swift.String?
  public var externalId: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var isDefault: Swift.Bool?
  public var lastName: Swift.String?
  public var patientId: Swift.String?
  public var paymentMethodId: Swift.String?
  public var paymentTypeId: CovantexSDK.PaymentMethodDto.PaymentTypeId?
  public var phoneNumber: Swift.String?
  public var expDate: Swift.String?
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  public enum PaymentTypeId : Swift.String {
    case CreditCard
    case BankAccount
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
extension CovantexSDK.PaymentMethodDto : Swift.Equatable, Swift.Hashable {
  public static func == (left: CovantexSDK.PaymentMethodDto, right: CovantexSDK.PaymentMethodDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CaregiverWorkWindowDto : ObjectMapper.Mappable, Swift.Codable {
  public var caregiverId: Swift.String?
  public var caregiverWorkWindowId: Swift.String?
  public var endTime: Foundation.Date?
  public var startTime: Foundation.Date?
  public var workWindowAttributes: CovantexSDK.WorkWindowAttributeDto?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PasswordRecoveryConfirmationDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public var newPassword: Swift.String?
  public var securityQuestionsAnswers: Swift.String?
  public var userId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class StatusService {
  public static let shared: CovantexSDK.StatusService
  public func url(_ baseUrl: CovantexSDK.StatusService.baseUrl) -> Swift.String
  public enum baseUrl {
    case resourceStatus
    public static func == (a: CovantexSDK.StatusService.baseUrl, b: CovantexSDK.StatusService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getCurrentResourceStatus(baseurl: Swift.String = API.settings.mainServiceHost, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.Resource>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct CovidScreeningLookupDto : ObjectMapper.Mappable {
  public var code: Swift.String?
  public var name: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@_hasMissingDesignatedInitializers public class InsuranceService {
  public static let shared: CovantexSDK.InsuranceService
  public func url(_ baseUrl: CovantexSDK.InsuranceService.baseUrl) -> Swift.String
  public enum baseUrl {
    case insuranceCompanies
    public static func == (a: CovantexSDK.InsuranceService.baseUrl, b: CovantexSDK.InsuranceService.baseUrl) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getInsuranceCompanies(_ apiQuery: CovantexSDK.ApiQuery, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.InsuranceCompanyDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  @objc deinit
}
public struct XenditCreateTokenDto : ObjectMapper.Mappable {
  public var cardData: CovantexSDK.XenditCreateTokenCardDataDto?
  public var cardCvn: Swift.String?
  public var isSingleUse: Swift.Bool?
  public var shouldAuthenticate: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct XenditTokenDto : ObjectMapper.Mappable {
  public var id: Swift.String?
  public var creditCardTokenId: Swift.String?
  public var maskedCardNumber: Swift.String?
  public var authenticationId: Swift.String?
  public var status: CovantexSDK.XenditTokenDto.Status?
  public var cardInfo: CovantexSDK.XenditTokenCardInfoDto?
  public var metadata: CovantexSDK.XenditTokenCardInfoDto?
  public var payerAuthenticationUrl: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum Status : Swift.String {
    case IN_REVIEW
    case VERIFIED
    case FAILED
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct MedicationDto : ObjectMapper.Mappable {
  public var days: Swift.Int?
  public var disease: Swift.String?
  public var end: Foundation.Date?
  public var fullDrugName: Swift.String?
  public var medicationId: Swift.String?
  public var name: Swift.String?
  public var otc: Swift.Bool?
  public var patientId: Swift.String?
  public var prescriberId: Swift.String?
  public var qty: Swift.String?
  public var refills: Swift.Int?
  public var sig: Swift.String?
  public var start: Foundation.Date?
  public var strength: Swift.String?
  public var timestamp: Foundation.Date?
  public var physicianFirstName: Swift.String?
  public var physicianLastName: Swift.String?
  public var isEdit: Swift.Bool
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct PasswordRecoveryDto : ObjectMapper.Mappable {
  public var userId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct RegistrationsResponseDto : ObjectMapper.Mappable {
  public var arePaymentMethodsRequired: Swift.Bool?
  public var patientId: Swift.String?
  public var registrationKey: Swift.String?
  public var roles: [Swift.String]?
  public var token: Swift.String?
  public var sessionStatus: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.RegistrationsResponseDto {
  public var role: Swift.String {
    get
  }
}
public struct PaymentAuthorizationDto : ObjectMapper.Mappable {
  public var amount: Swift.Double?
  public var authenticationUrl: Swift.String?
  public var callbackUrl: Swift.String?
  public var currency: Swift.String?
  public var expirationDate: Foundation.Date?
  public var fraudSessionId: Swift.String?
  public var invoiceId: Swift.String?
  public var message: Swift.String?
  public var patientId: Swift.String?
  public var paymentAuthorizationId: Swift.String?
  public var paymentAuthorizationStatusId: CovantexSDK.PaymentAuthorizationDto.PaymentAuthorizationStatusId?
  public var paymentMethodId: Swift.String?
  public var terminalId: Swift.String?
  public var timestamp: Foundation.Date?
  public var token: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum PaymentAuthorizationStatusId : Swift.String {
    case Authorized
    case Canceled
    case Completed
    case Failed
    case InReview
    case CompleteAuthorization
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ApplicationDto : ObjectMapper.Mappable, Swift.Codable {
  public var apiKey: Swift.String?
  public var applicationId: Swift.String?
  public var applicationName: Swift.String?
  public var allowedSetStatusCancelledReassignedRescheduledBeforeStartConsultHours: Swift.Int?
  public var blueSnapPublicKey: Swift.String?
  public var blueSnapScriptUrl: Swift.String?
  public var branding: CovantexSDK.BrandingDto?
  public var callUrl: Swift.String?
  public var conferenceUrl: Swift.String?
  public var createdDate: Foundation.Date?
  public var dashboardUrl: Swift.String?
  public var defaultAccessCode: Swift.String?
  public var defaultCountry: CovantexSDK.DefaultCountryDto?
  public var defaultLanguage: Swift.String?
  public var enabledTwilio: Swift.Bool?
  public var eligibilityUrl: Swift.String?
  public var environment: Swift.String?
  public var facebookClientId: Swift.String?
  public var facebookRedirectUrl: Swift.String?
  public var googleClientId: Swift.String?
  public var googleRedirectUrl: Swift.String?
  public var isomorphicConfig: CovantexSDK.IsomorphicConfigDto?
  public var lastUpdatedDate: Foundation.Date?
  public var mainApiUrl: Swift.String?
  public var medicalItemsUrl: Swift.String?
  public var metricMeasurementSystem: CovantexSDK.MetricMeasurementSystemDto?
  public var oneTimePasswordSendingType: CovantexSDK.ApplicationDto.OneTimePasswordSendingType?
  public var packageId: Swift.String?
  public var patientLoginType: CovantexSDK.ApplicationDto.PatientLoginType?
  public var pcpUrl: Swift.String?
  public var plans: [CovantexSDK.ApplicationPlanDto]?
  public var paymentCurrency: Swift.String?
  public var paymentCurrencySymbol: Swift.String?
  public var registrationType: CovantexSDK.ApplicationDto.eRegistrationType?
  public var regionalSpecificSettings: CovantexSDK.RegionalSpecificSettingsDto?
  public var rxHistoryUrl: Swift.String?
  public var status: CovantexSDK.ApplicationDto.applicationStatus?
  public var stringsUrl: Swift.String?
  public var serverHubUrl: Swift.String?
  public var showDynamicMhd: Swift.Bool?
  public var showDynamicVitals: Swift.Bool?
  public var showFamilyMembers: Swift.Bool?
  public var showMemberResheduleConsult: Swift.Bool?
  public var showSocialNetworkBtn: Swift.Bool?
  public var simpleRegistration: Swift.Bool?
  public var smsRegistrationRequired: Swift.Bool?
  public var snsConfig: CovantexSDK.SnsConfigDto?
  public var toolUrl: Swift.String?
  public var usedPaymentSystem: CovantexSDK.ApplicationDto.UsedPaymentSystem?
  public var visibilityMaternalProgram: Swift.Bool?
  public var visibilityMenuItemPackagesForPatient: Swift.Bool?
  public var xenditPublicApiKey: Swift.String?
  public var zipCodesUrl: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum PatientLoginType : Swift.String, Swift.Codable {
    case ByLoginAndPassword
    case ByOneTimePassword
    case ByUserId
    case ByLoginToken
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OneTimePasswordSendingType : Swift.String, Swift.Codable {
    case Email
    case Sms
    case Event
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum eRegistrationType : Swift.String, Swift.Codable {
    case full
    case simple
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum applicationStatus : Swift.String, Swift.Codable {
    case active
    case inactive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum UsedPaymentSystem : Swift.String, Swift.Codable {
    case authorizeNet
    case blueSnap
    case ePay
    case xendit
    case xenditInvoice
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CovantexSDK.ApplicationDto {
  public var isRegistrationTypeFull: Swift.Bool {
    get
  }
  public var isRegistrationTypeSimple: Swift.Bool {
    get
  }
}
extension CovantexSDK.ApplicationDto {
  public enum eAuthenticationType {
    case byEmailOTP
    case bySMSOTP
    case byLoginPassword
    public static func == (a: CovantexSDK.ApplicationDto.eAuthenticationType, b: CovantexSDK.ApplicationDto.eAuthenticationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var authenticationType: CovantexSDK.ApplicationDto.eAuthenticationType {
    get
  }
}
public struct PreregistrationVerificationDto : ObjectMapper.Mappable {
  public var appProvider: CovantexSDK.PreregistrationVerificationDto.AppProvider?
  public var appProviderSecretCode: Swift.String?
  public var code: Swift.String?
  public var personId: Swift.String?
  public var phoneNumber: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum AppProvider : Swift.String {
    case Google
    case Facebook
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct VitalTypeRangeDto : ObjectMapper.Mappable {
  public var max: Swift.Double?
  public var min: Swift.Double?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct EncounterOrderFileItemDto : ObjectMapper.Mappable {
  public var accessCode: Swift.String?
  public var clientName: Swift.String?
  public var encounterId: Swift.String?
  public var encounterOrderFileId: Swift.String?
  public var encounterOrderFileStatus: CovantexSDK.EncounterOrderFileItemDto.EncounterOrderFileStatus?
  public var encounterOrderFileStatusOn: Foundation.Date?
  public var encounterOrderId: Swift.String?
  public var encounterStatus: CovantexSDK.EncounterOrderFileItemDto.EncounterStatus?
  public var fileContentType: Swift.String?
  public var fileId: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileUrl: Swift.String?
  public var lastUpdatedByName: Swift.String?
  public var lastUpdatedDate: Foundation.Date?
  public var orderStatus: CovantexSDK.EncounterOrderFileItemDto.OrderStatus?
  public var patientName: Swift.String?
  public var physicianName: Swift.String?
  public var resellerServiceType: CovantexSDK.EncounterOrderFileItemDto.ResellerServiceType?
  public var vendorId: Swift.String?
  public var vendorName: Swift.String?
  public var vendorRecipients: Swift.String?
  public var vendorTransportMethods: Swift.String?
  public var vendorMedicalItemId: Swift.String?
  public var orderName: Swift.String?
  public var orderProvider: Swift.String?
  public var orderDateSent: Foundation.Date?
  public var orderDateCreated: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum EncounterOrderFileStatus : Swift.String {
    case New
    case Rejected
    case Approved
    case Completed
    case Reviewed
    case Sent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum EncounterStatus : Swift.String {
    case Started
    case Scheduled
    case Rescheduled
    case Active
    case PendingPayment
    case Closed
    case Unpaid
    case Accepted
    case Cancelled
    case TimedOut
    case Redirected
    case RedirectedAndPaid
    case Preprocessing
    case ClosedAndPaid
    case Failed
    case FailedAndPaid
    case Reassigned
    case Postprocessing
    case CancelledAndPaid
    case NoShow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OrderStatus : Swift.String {
    case AuditPassed
    case AuditFailed
    case OrderAccepted
    case OrderRejected
    case OrderShipped
    case OrderReceived
    case New
    case Created
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ResellerServiceType : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CovantexSDK.MainService {
  public func getLocalization_Enum_Picklist_AndSave(forLanguage language: Swift.String, onSuccess: @escaping (([CovantexSDK.EnumDto]) -> Swift.Void), onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func checkIfAccessCodeValid(code: Swift.String, completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> Swift.Void)
}
extension CovantexSDK.MainService {
  public func getTerms(termsAndConditionsId: Swift.String, statementId: Swift.String? = nil, completionHandler: @escaping (_ termsDto: CovantexSDK.TermsDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func getTerms(planId: Swift.String, stateId: Swift.String? = "", completion: @escaping (_ termsDto: CovantexSDK.TermsDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func getTerms(resellerId: Swift.String, stateId: Swift.String?, completion: @escaping (_ termsDto: CovantexSDK.TermsDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func getTerms(forCaregiver caregiverId: Swift.String, completion: @escaping (_ arrTermsAndConditionsCaregiverDto: [CovantexSDK.TermsAndConditionsCaregiverDto], _ errorMessage: Swift.String?) -> Swift.Void)
}
extension CovantexSDK.MainService {
  public func signTerms(patientId: Swift.String, planId: Swift.String, completion: @escaping (_ patientDto: CovantexSDK.RegistrationPatientDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signTerms(patient: CovantexSDK.RegistrationPatientDto, planId: Swift.String, completion: @escaping (_ patientDto: CovantexSDK.RegistrationPatientDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signTerms(patientId: Swift.String, planId: Swift.String, completion: @escaping (_ patientDto: CovantexSDK.PatientDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signTerms(patient: CovantexSDK.PatientDto, planId: Swift.String, completion: @escaping (_ patientDto: CovantexSDK.PatientDto?, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signPackagesTerms(patientId: Swift.String, completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signPackagesTerms(patientPackages: [CovantexSDK.PatientPackageDto], completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> Swift.Void)
  public func signPackageTerms(patientPackage: CovantexSDK.PatientPackageDto, completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> Swift.Void)
}
extension CovantexSDK.MainService {
  public func getPackagesWithCoupons(_ apiQuery: CovantexSDK.ApiQuery, onSuccess: @escaping CovantexSDK.onSuccess_ArrayHandler<CovantexSDK.PackageDto>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func getPackageWithCoupons(packageId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PackageDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func registerWithDefaultPackage(body: CovantexSDK.RegistrationPatientDto, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.RegistrationsResponseDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func updatePatientTimeZone(patientId: Swift.String, timeZone: Swift.String = TimeZone.current.identifier, _ apiQuery: CovantexSDK.ApiQuery? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.PatientDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func getPackagesExcludePurchasedPackages(patientId: Swift.String, _ apiQuery: CovantexSDK.ApiQuery, onSuccess: @escaping CovantexSDK.onSuccess_ArrayHandler<CovantexSDK.PackageDto>, onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func getEnvironmentFlagsandSave(completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> ())
  public func getApplicationandSave(completion: @escaping (_ isSuccess: Swift.Bool, _ errorMessage: Swift.String?) -> ())
}
extension CovantexSDK.MainService {
  public func getEncounterOrders(encounterId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.EncounterOrderFileItemDto>>, onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func createVideoCallRequest(encounterId: Swift.String, providerType: CovantexSDK.CommunicationDto.ProviderType = .twilio, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.NotificationDataHolder>, onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.MainService {
  public func uploadUserProfileFile(fileContentType: Swift.String, fileName: Swift.String, fileData: Foundation.Data, userId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.UserProfileFileDto>>, inProgress: CovantexSDK.inProgressHandler? = nil, onFailure: CovantexSDK.onFailureHandler? = nil)
  public func uploadCareGiverSignature(fileName: Swift.String = "Signature.png", fileData: Foundation.Data, caregiverId: Swift.String, onSuccess: @escaping CovantexSDK.onSuccessHandler<CovantexSDK.ResponseDto<CovantexSDK.CaregiverDto>>, inProgress: CovantexSDK.inProgressHandler? = nil, onFailure: CovantexSDK.onFailureHandler? = nil)
}
public struct UserProfileFileDto : ObjectMapper.Mappable, Swift.Equatable, Swift.Hashable {
  public static func == (left: CovantexSDK.UserProfileFileDto, right: CovantexSDK.UserProfileFileDto) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var createdBy: Swift.String?
  public var createdByName: Swift.String?
  public var createdDate: Foundation.Date?
  public var description: Swift.String?
  public var fileContentType: Swift.String?
  public var fileId: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileStoragePlace: CovantexSDK.UserProfileFileDto.FileStoragePlace?
  public var fileType: CovantexSDK.UserProfileFileDto.FileType?
  public var lastUpdatedBy: Swift.String?
  public var lastUpdatedByName: Swift.String?
  public var lastUpdatedDate: Foundation.Date?
  public var storageFileName: Swift.String?
  public var url: Swift.String?
  public var userId: Swift.String?
  public var userProfileFileId: Swift.String?
  public var videoLength: Swift.String?
  public var encounterId: Swift.String?
  public var isSelected: Swift.Bool?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum FileStoragePlace : Swift.String {
    case Local
    case S3
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FileType : Swift.String {
    case Audio
    case Document
    case Image
    case Video
    case Unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class API {
  public static func initialize(env: CovantexSDK.APISettings.APIEnvironmentType, mainServiceApiKey: Swift.String, mainServiceBaseUrl: Swift.String, logLevel: CovantexSDK.API.APILogLevel = .off, log: ((_ log: Swift.String) -> Swift.Void)? = nil, sessionExpired: ((_ response: CovantexSDK.ResponseDto<CovantexSDK.SessionDto>) -> Swift.Void)? = nil, timeout: (() -> Swift.Void)? = nil, isMaintenanceRunning: ((_ isMaintenanceRunning: Swift.Bool, _ resource: CovantexSDK.Resource?, _ errorIfAny: (any Swift.Error)?) -> Swift.Void)? = nil, onInternetChange: ((_ connection: CovantexSDK.InternetReachability.Connection) -> Swift.Void)? = nil)
  public static let version: Swift.String
  public static let stringsService: CovantexSDK.StringsService
  public static let mainService: CovantexSDK.MainService
  public static let covidService: CovantexSDK.CovidService
  public static let physiciansService: CovantexSDK.PhysiciansService
  public static let insuranceService: CovantexSDK.InsuranceService
  public static let vendorsService: CovantexSDK.VendorsService
  public static let xenditService: CovantexSDK.XenditService
  public static let zipcodesService: CovantexSDK.ZipcodesService
  public static let statusService: CovantexSDK.StatusService
  public static let linkShortenerService: CovantexSDK.LinkShortenerService
  public static let getDeviceAdvertisingId: Swift.String
  public static let internet: CovantexSDK.SDKInternetManager
  @objc deinit
}
extension CovantexSDK.API {
  public static func downloadFile(url: Swift.String, headersCustom: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Swift.String]? = nil, fileName: Swift.String, fileId: Swift.String?, interceptor: (any Alamofire.RequestInterceptor)? = nil, onSuccess: @escaping CovantexSDK.onSuccess_FileHandler, onFailure: CovantexSDK.onFailureHandler? = nil, inProgress: CovantexSDK.inProgressHandler? = nil)
  public static func uploadFile<T>(url: Swift.String, headersCustom: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Swift.String], fileData: Foundation.Data, fileName: Swift.String, typeofResponseModel: T.Type, interceptor: (any Alamofire.RequestInterceptor)? = nil, onSuccess: @escaping CovantexSDK.onSuccessHandler<T>, onFailure: CovantexSDK.onFailureHandler? = nil, inProgress: CovantexSDK.inProgressHandler? = nil) where T : ObjectMapper.Mappable
}
extension CovantexSDK.API {
  public static func sessionExpired(_ expired: @escaping ((_ response: CovantexSDK.ResponseDto<CovantexSDK.SessionDto>) -> Swift.Void))
  public static func sessionUpdated(_ isSuccess: Swift.Bool)
  public static func timeout(_ completion: @escaping (() -> Swift.Void))
  public static func isMaintenanceRunning(_ completion: @escaping ((_ isMaintenanceRunning: Swift.Bool, _ resource: CovantexSDK.Resource?, _ errorIfAny: (any Swift.Error)?) -> Swift.Void))
  public static func getAPILog(_ log: @escaping ((_ log: Swift.String) -> Swift.Void))
  public enum APILogLevel : Swift.Codable {
    case off
    case info
    case debug
    public static func == (a: CovantexSDK.API.APILogLevel, b: CovantexSDK.API.APILogLevel) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func setLogLevel(_ logLevel: CovantexSDK.API.APILogLevel)
  public static var logLevel: CovantexSDK.API.APILogLevel {
    get
  }
  public static func updateSession(session: CovantexSDK.MainServiceSession)
  public static func clearSession()
  public static func updateSessionTemp(sessionTemp: CovantexSDK.MainServiceSession)
  public static func clearSessionTemp()
  public static func updateSettings(settings: CovantexSDK.APISettings)
  public static var settings: CovantexSDK.APISettings {
    get
  }
  public static var session: CovantexSDK.MainServiceSession {
    get
  }
  public static var session_Temp: CovantexSDK.MainServiceSession {
    get
  }
  public static func getFileURL(id: Swift.String) -> Swift.String
  public static func getFileURL_withHeaders(id: Swift.String) -> Swift.String
}
extension CovantexSDK.API {
  public static func stopAllSessions_And_APIRequests()
  public static func cancelRequest(_ strURL: Swift.String)
  public static func isRequestInProcess(using strURL: Swift.String, completion: @escaping (Swift.Bool) -> ())
}
public typealias onSuccess_ArrayHandler<T> = (([T]) -> Swift.Void) where T : ObjectMapper.Mappable
public typealias onSuccess_FileHandler = ((_ fileURL: Foundation.URL?) -> Swift.Void)
public typealias onSuccessHandler<T> = ((T) -> Swift.Void) where T : ObjectMapper.Mappable
public typealias onFailureHandler = (any Swift.Error) -> Swift.Void
public typealias inProgressHandler = (_ progress: Foundation.Progress) -> Swift.Void
public struct EncounterFileDto : ObjectMapper.Mappable {
  public var createdBy: Swift.String?
  public var createdByFirstName: Swift.String?
  public var createdByLastName: Swift.String?
  public var createdDate: Foundation.Date?
  public var description: Swift.String?
  public var encounterFileId: Swift.String?
  public var encounterId: Swift.String?
  public var fileId: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.String?
  public var fileStoragePlace: CovantexSDK.EncounterFileDto.FileStoragePlace?
  public var fileType: CovantexSDK.EncounterFileDto.FileType?
  public var lastUpdatedBy: Swift.String?
  public var lastUpdatedByName: Swift.String?
  public var lastUpdatedDate: Foundation.Date?
  public var medicalContentType: Swift.String?
  public var status: CovantexSDK.EncounterFileDto.Status?
  public var storageFileName: Swift.String?
  public var url: Swift.String?
  public var videoLength: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum FileStoragePlace : Swift.String {
    case Local
    case S3
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FileType : Swift.String {
    case Image
    case Video
    case Audio
    case Unknown
    case Document
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String {
    case New
    case Rejected
    case Approved
    case Completed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct EncounterMeetingDto : ObjectMapper.Mappable {
  public var encounterId: Swift.String?
  public var encounterMeetingId: Swift.String?
  public var joinUrl: Swift.String?
  public var meetingId: Swift.String?
  public var meetingTypeId: CovantexSDK.EncounterMeetingDto.MeetingTypeId?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum MeetingTypeId : Swift.String {
    case Zoom
    case Twilio
    case Zego
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct PharmacyStoreDto : ObjectMapper.Mappable {
  public var address: CovantexSDK.AddressDto?
  public var alternativeNumber: Swift.String?
  public var customerCareNumber: Swift.String?
  public var email: Swift.String?
  public var employers: Swift.Int?
  public var externalAccountId: Swift.String?
  public var faxNumber: Swift.String?
  public var friEnd: Swift.String?
  public var friStart: Swift.String?
  public var hoursOfOperation: Swift.String?
  public var is24Hour: Swift.Bool?
  public var is24HourPharmacy: Swift.Bool?
  public var isClinic: Swift.Bool?
  public var isCompouding: Swift.Bool?
  public var isConvenience: Swift.Bool?
  public var isDriveThru: Swift.Bool?
  public var isHealthService: Swift.Bool?
  public var isHospital: Swift.Bool?
  public var lat: Swift.Double?
  public var long: Swift.Double?
  public var mainNumber: Swift.String?
  public var mon2FriEqual: Swift.Bool?
  public var monEnd: Swift.String?
  public var monStart: Swift.String?
  public var name: Swift.String?
  public var number: Swift.String?
  public var organizationId: Swift.String?
  public var organizationImageId: Swift.String?
  public var organizations: [CovantexSDK.OrganizationDto]?
  public var organizationTypeId: CovantexSDK.PharmacyStoreDto.OrganizationTypeId?
  public var pharmacyDriveFriEnd: Swift.String?
  public var pharmacyDriveFriStart: Swift.String?
  public var pharmacyDriveMonEnd: Swift.String?
  public var pharmacyDriveMonStart: Swift.String?
  public var pharmacyDriveSatEnd: Swift.String?
  public var pharmacyDriveSatStart: Swift.String?
  public var pharmacyDriveSunEnd: Swift.String?
  public var pharmacyDriveSunStart: Swift.String?
  public var pharmacyDriveThuEnd: Swift.String?
  public var pharmacyDriveThuStart: Swift.String?
  public var pharmacyDriveTueEnd: Swift.String?
  public var pharmacyDriveTueStart: Swift.String?
  public var pharmacyDriveWedEnd: Swift.String?
  public var pharmacyDriveWedStart: Swift.String?
  public var pharmacyFriEnd: Swift.String?
  public var pharmacyFriStart: Swift.String?
  public var pharmacyHours: Swift.String?
  public var pharmacyMon2FriEqual: Swift.Bool?
  public var pharmacyMonEnd: Swift.String?
  public var pharmacyMonStart: Swift.String?
  public var pharmacyPhoneNumber: Swift.String?
  public var pharmacySatEnd: Swift.String?
  public var pharmacySatStart: Swift.String?
  public var pharmacyStoreId: Swift.String?
  public var pharmacySunEnd: Swift.String?
  public var pharmacySunStart: Swift.String?
  public var pharmacyThuEnd: Swift.String?
  public var pharmacyThuStart: Swift.String?
  public var pharmacyTueEnd: Swift.String?
  public var pharmacyTueStart: Swift.String?
  public var pharmacyWedEnd: Swift.String?
  public var pharmacyWedStart: Swift.String?
  public var phoneNumber: Swift.String?
  public var primaryContact: CovantexSDK.UserProfileDto?
  public var satEnd: Swift.String?
  public var satStart: Swift.String?
  public var services: Swift.String?
  public var storeHours: Swift.String?
  public var sunEnd: Swift.String?
  public var sunStart: Swift.String?
  public var thuEnd: Swift.String?
  public var thuStart: Swift.String?
  public var tueEnd: Swift.String?
  public var tueStart: Swift.String?
  public var wedEnd: Swift.String?
  public var wedStart: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum OrganizationTypeId : Swift.String {
    case Client
    case Reseller
    case Hospital
    case Pharmacy
    case PhysicianPractice
    case ExtendedCareFacility
    case Employer
    case InsuranceCompany
    case Other
    case Store
    case Clinic
    case ProviderNetwork
    case CallCenter
    case Laboratory
    case DMESupplier
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct CaregiverItemDto : ObjectMapper.Mappable {
  public var acceptedConsults: Swift.Int?
  public var activeConsults: Swift.Int?
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var bestContact: Swift.String?
  public var bestContactName: Swift.String?
  public var caregiverId: Swift.String?
  public var caregiverType: Swift.String?
  public var city: Swift.String?
  public var closedConsults: Swift.Int?
  public var country: Swift.String?
  public var email: Swift.String?
  public var faxNumber: Swift.String?
  public var firstName: Swift.String?
  public var lastConsultDate: Foundation.Date?
  public var lastName: Swift.String?
  public var lastPatient: Swift.String?
  public var medicaidId: Swift.String?
  public var memberSince: Foundation.Date?
  public var npiNumber: Swift.String?
  public var online: Swift.Bool?
  public var organization: Swift.String?
  public var pecosCertified: Swift.String?
  public var providerNetworkCaregiverIds: Swift.String?
  public var providerNetworkIds: Swift.String?
  public var providerNetworkNames: Swift.String?
  public var scheduled: Swift.Bool?
  public var specialties: Swift.String?
  public var state: Swift.String?
  public var states: Swift.String?
  public var status: Swift.String?
  public var totalConsults: Swift.Int?
  public var totalStates: Swift.String?
  public var userName: Swift.String?
  public var zipcode: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct MedicalReleaseDto : ObjectMapper.Mappable, Swift.Codable {
  public var currentPhone: Swift.String?
  public var dateCompleting: Foundation.Date?
  public var latestStatementId: Swift.String?
  public var medicalReleaseId: Swift.String?
  public var patientId: Swift.String?
  public var personCompleting: Swift.String?
  public var relationPersonComplete: Swift.String?
  public var statementId: Swift.String?
  public var statusDate: Foundation.Date?
  public var statusId: CovantexSDK.MedicalReleaseDto.StatusId?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum StatusId : Swift.String, Swift.Codable {
    case Active
    case Archive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResellerStatementDto : ObjectMapper.Mappable {
  public var country: Swift.String?
  public var state: Swift.String?
  public var statementId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.StringsService {
  public func getLocalization(forLanguage language: Swift.String, onSuccess: @escaping ((Foundation.NSDictionary) -> Swift.Void), onFailure: CovantexSDK.onFailureHandler? = nil)
}
extension CovantexSDK.StringsService {
  public func getLocalisedMessage<T>(responseDto: CovantexSDK.ResponseDto<T>) -> Swift.String where T : ObjectMapper.Mappable
  public func getLocalisedString(key: Swift.String, defaultString: Swift.String) -> Swift.String
}
public struct CovidScreeningResponseDto : ObjectMapper.Mappable {
  public var data: [CovantexSDK.CovidScreeningDto]?
  public var covidScreening: [CovantexSDK.CovidScreeningDto]?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
public struct ResellerServicePlanDto : ObjectMapper.Mappable {
  public var isDefault: Swift.Bool?
  public var planId: Swift.String?
  public var resellerServiceId: Swift.String?
  public var resellerServiceName: Swift.String?
  public var resellerServicePlanId: Swift.String?
  public var resellerServiceType: CovantexSDK.ResellerServicePlanDto.ResellerServiceType?
  public var vendorId: Swift.String?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
  public enum ResellerServiceType : Swift.String {
    case NonEmergent
    case MentalHealth
    case Dietary
    case Lab
    case DME
    case CGX
    case PGX
    case SpecialtyRx
    case ED
    case GSID
    case Allergy
    case HRT
    case CompoundRx
    case CarrierID
    case Ortele
    case Imaging
    case PhysicalTherapy
    case SickLeave
    case Referral
    case Monitoring
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct EpisodeDto : ObjectMapper.Mappable {
  public var caregiverId: Swift.String?
  public var chiefComplaint: Swift.String?
  public var episodeId: Swift.String?
  public var patientId: Swift.String?
  public var timestamp: Foundation.Date?
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
extension CovantexSDK.ApiQuery.OrderBy.OrderType : Swift.Equatable {}
extension CovantexSDK.ApiQuery.OrderBy.OrderType : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension CovantexSDK.InternetReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension CovantexSDK.InternetReachability.NetworkStatus : Swift.Hashable {}
extension CovantexSDK.InternetReachability.Connection : Swift.Equatable {}
extension CovantexSDK.InternetReachability.Connection : Swift.Hashable {}
extension CovantexSDK.MhdHistoryDto.Disease : Swift.Equatable {}
extension CovantexSDK.MhdHistoryDto.Disease : Swift.Hashable {}
extension CovantexSDK.MhdHistoryDto.Disease : Swift.RawRepresentable {}
extension CovantexSDK.MhdHistoryDto.Relatives : Swift.Equatable {}
extension CovantexSDK.MhdHistoryDto.Relatives : Swift.Hashable {}
extension CovantexSDK.MhdHistoryDto.Relatives : Swift.RawRepresentable {}
extension CovantexSDK.ZipcodesService.baseUrl : Swift.Equatable {}
extension CovantexSDK.ZipcodesService.baseUrl : Swift.Hashable {}
extension CovantexSDK.UserDeviceDto.DeviceTypeId : Swift.Equatable {}
extension CovantexSDK.UserDeviceDto.DeviceTypeId : Swift.Hashable {}
extension CovantexSDK.UserDeviceDto.DeviceTypeId : Swift.RawRepresentable {}
extension CovantexSDK.UserDeviceDto.UserDeviceStatus : Swift.Equatable {}
extension CovantexSDK.UserDeviceDto.UserDeviceStatus : Swift.Hashable {}
extension CovantexSDK.UserDeviceDto.UserDeviceStatus : Swift.RawRepresentable {}
extension CovantexSDK.DeviceDataDto.DeviceRingMode : Swift.Equatable {}
extension CovantexSDK.DeviceDataDto.DeviceRingMode : Swift.Hashable {}
extension CovantexSDK.DeviceDataDto.DeviceRingMode : Swift.RawRepresentable {}
extension CovantexSDK.StringsService.baseUrl : Swift.Equatable {}
extension CovantexSDK.StringsService.baseUrl : Swift.Hashable {}
extension CovantexSDK.VitalReportRequestDto.FuncType : Swift.Equatable {}
extension CovantexSDK.VitalReportRequestDto.FuncType : Swift.Hashable {}
extension CovantexSDK.VitalReportRequestDto.FuncType : Swift.RawRepresentable {}
extension CovantexSDK.VitalReportRequestDto.Period : Swift.Equatable {}
extension CovantexSDK.VitalReportRequestDto.Period : Swift.Hashable {}
extension CovantexSDK.VitalReportRequestDto.Period : Swift.RawRepresentable {}
extension CovantexSDK.VitalReportRequestDto.Status : Swift.Equatable {}
extension CovantexSDK.VitalReportRequestDto.Status : Swift.Hashable {}
extension CovantexSDK.VitalReportRequestDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.PackageDto.StatusId : Swift.Equatable {}
extension CovantexSDK.PackageDto.StatusId : Swift.Hashable {}
extension CovantexSDK.PackageDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.PackageDto.EApplyChangesToSubscribers : Swift.Equatable {}
extension CovantexSDK.PackageDto.EApplyChangesToSubscribers : Swift.Hashable {}
extension CovantexSDK.PackageDto.EApplyChangesToSubscribers : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileDto.FileStoragePlace : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileDto.FileStoragePlace : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileDto.FileStoragePlace : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileDto.FileType : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileDto.FileType : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileDto.FileType : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileDto.ResellerServiceType : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileDto.ResellerServiceType : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileDto.ResellerServiceType : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileDto.Status : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileDto.Status : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.CommunicationDto.ParticipantType : Swift.Equatable {}
extension CovantexSDK.CommunicationDto.ParticipantType : Swift.Hashable {}
extension CovantexSDK.CommunicationDto.ParticipantType : Swift.RawRepresentable {}
extension CovantexSDK.CommunicationDto.CommunicationType : Swift.Equatable {}
extension CovantexSDK.CommunicationDto.CommunicationType : Swift.Hashable {}
extension CovantexSDK.CommunicationDto.CommunicationType : Swift.RawRepresentable {}
extension CovantexSDK.CommunicationDto.ProviderType : Swift.Equatable {}
extension CovantexSDK.CommunicationDto.ProviderType : Swift.Hashable {}
extension CovantexSDK.CommunicationDto.ProviderType : Swift.RawRepresentable {}
extension CovantexSDK.CommunicationDto.CommunicationStatus : Swift.Equatable {}
extension CovantexSDK.CommunicationDto.CommunicationStatus : Swift.Hashable {}
extension CovantexSDK.CommunicationDto.CommunicationStatus : Swift.RawRepresentable {}
extension CovantexSDK.PatientPackageDto.StatusId : Swift.Equatable {}
extension CovantexSDK.PatientPackageDto.StatusId : Swift.Hashable {}
extension CovantexSDK.PatientPackageDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.Resource.resourceStatus : Swift.Equatable {}
extension CovantexSDK.Resource.resourceStatus : Swift.Hashable {}
extension CovantexSDK.Resource.resourceStatus : Swift.RawRepresentable {}
extension CovantexSDK.PatientDto.BestContactNumberId : Swift.Equatable {}
extension CovantexSDK.PatientDto.BestContactNumberId : Swift.Hashable {}
extension CovantexSDK.PatientDto.BestContactNumberId : Swift.RawRepresentable {}
extension CovantexSDK.PatientDto.MemberAccessLevelId : Swift.Equatable {}
extension CovantexSDK.PatientDto.MemberAccessLevelId : Swift.Hashable {}
extension CovantexSDK.PatientDto.MemberAccessLevelId : Swift.RawRepresentable {}
extension CovantexSDK.PatientDto.MemberRoleId : Swift.Equatable {}
extension CovantexSDK.PatientDto.MemberRoleId : Swift.Hashable {}
extension CovantexSDK.PatientDto.MemberRoleId : Swift.RawRepresentable {}
extension CovantexSDK.PatientDto.OccupationId : Swift.Equatable {}
extension CovantexSDK.PatientDto.OccupationId : Swift.Hashable {}
extension CovantexSDK.PatientDto.OccupationId : Swift.RawRepresentable {}
extension CovantexSDK.PatientDto.UserStatusId : Swift.Equatable {}
extension CovantexSDK.PatientDto.UserStatusId : Swift.Hashable {}
extension CovantexSDK.PatientDto.UserStatusId : Swift.RawRepresentable {}
extension CovantexSDK.ResellerDto.OrganizationTypeId : Swift.Equatable {}
extension CovantexSDK.ResellerDto.OrganizationTypeId : Swift.Hashable {}
extension CovantexSDK.ResellerDto.OrganizationTypeId : Swift.RawRepresentable {}
extension CovantexSDK.VendorsService.baseUrl : Swift.Equatable {}
extension CovantexSDK.VendorsService.baseUrl : Swift.Hashable {}
extension CovantexSDK.EncounterRefillDto.RefillStatus : Swift.Equatable {}
extension CovantexSDK.EncounterRefillDto.RefillStatus : Swift.Hashable {}
extension CovantexSDK.EncounterRefillDto.RefillStatus : Swift.RawRepresentable {}
extension CovantexSDK.ResellerServiceDto.ServiceTypeId : Swift.Equatable {}
extension CovantexSDK.ResellerServiceDto.ServiceTypeId : Swift.Hashable {}
extension CovantexSDK.ResellerServiceDto.ServiceTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterNoteDto.NoteType : Swift.Equatable {}
extension CovantexSDK.EncounterNoteDto.NoteType : Swift.Hashable {}
extension CovantexSDK.EncounterNoteDto.NoteType : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderDto.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.EncounterOrderDto.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.EncounterOrderDto.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderDto.ExportStatusId : Swift.Equatable {}
extension CovantexSDK.EncounterOrderDto.ExportStatusId : Swift.Hashable {}
extension CovantexSDK.EncounterOrderDto.ExportStatusId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderDto.ResellerServiceTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterOrderDto.ResellerServiceTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterOrderDto.ResellerServiceTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderDto.StatusId : Swift.Equatable {}
extension CovantexSDK.EncounterOrderDto.StatusId : Swift.Hashable {}
extension CovantexSDK.EncounterOrderDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.CaregiverResellerServiceDto.ResellerServiceType : Swift.Equatable {}
extension CovantexSDK.CaregiverResellerServiceDto.ResellerServiceType : Swift.Hashable {}
extension CovantexSDK.CaregiverResellerServiceDto.ResellerServiceType : Swift.RawRepresentable {}
extension CovantexSDK.CovidService.baseUrl : Swift.Equatable {}
extension CovantexSDK.CovidService.baseUrl : Swift.Hashable {}
extension CovantexSDK.OrganizationDto.OrganizationTypeId : Swift.Equatable {}
extension CovantexSDK.OrganizationDto.OrganizationTypeId : Swift.Hashable {}
extension CovantexSDK.OrganizationDto.OrganizationTypeId : Swift.RawRepresentable {}
extension CovantexSDK.PatientActivityStatusDto.PatientActivityStatus : Swift.Equatable {}
extension CovantexSDK.PatientActivityStatusDto.PatientActivityStatus : Swift.Hashable {}
extension CovantexSDK.PatientActivityStatusDto.PatientActivityStatus : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.BestContactNumberId : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.BestContactNumberId : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.BestContactNumberId : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.MemberAccessLevelId : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.MemberAccessLevelId : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.MemberAccessLevelId : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.MemberRoleId : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.MemberRoleId : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.MemberRoleId : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.OccupationId : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.OccupationId : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.OccupationId : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.Status : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.Status : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.RegistrationPatientDto.UserStatusId : Swift.Equatable {}
extension CovantexSDK.RegistrationPatientDto.UserStatusId : Swift.Hashable {}
extension CovantexSDK.RegistrationPatientDto.UserStatusId : Swift.RawRepresentable {}
extension CovantexSDK.PackageCouponDto.ECouponType : Swift.Equatable {}
extension CovantexSDK.PackageCouponDto.ECouponType : Swift.Hashable {}
extension CovantexSDK.PackageCouponDto.ECouponType : Swift.RawRepresentable {}
extension CovantexSDK.PackageCouponDto.EApplyChangesToSubscribers : Swift.Equatable {}
extension CovantexSDK.PackageCouponDto.EApplyChangesToSubscribers : Swift.Hashable {}
extension CovantexSDK.PackageCouponDto.EApplyChangesToSubscribers : Swift.RawRepresentable {}
extension CovantexSDK.WorkWindowAttributeDto.EPriority : Swift.Equatable {}
extension CovantexSDK.WorkWindowAttributeDto.EPriority : Swift.Hashable {}
extension CovantexSDK.WorkWindowAttributeDto.EPriority : Swift.RawRepresentable {}
extension CovantexSDK.WorkWindowAttributeDto.EPatientAgeRole : Swift.Equatable {}
extension CovantexSDK.WorkWindowAttributeDto.EPatientAgeRole : Swift.Hashable {}
extension CovantexSDK.WorkWindowAttributeDto.EPatientAgeRole : Swift.RawRepresentable {}
extension CovantexSDK.OAuthDto.App : Swift.Equatable {}
extension CovantexSDK.OAuthDto.App : Swift.Hashable {}
extension CovantexSDK.OAuthDto.App : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.PatientLoginType : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.PatientLoginType : Swift.Hashable {}
extension CovantexSDK.EnvironmentFlagsDto.PatientLoginType : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.OneTimePasswordSendingType : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.OneTimePasswordSendingType : Swift.Hashable {}
extension CovantexSDK.EnvironmentFlagsDto.OneTimePasswordSendingType : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.PersonIdType : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.PersonIdType : Swift.Hashable {}
extension CovantexSDK.EnvironmentFlagsDto.PersonIdType : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.UsedPaymentSystem : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.UsedPaymentSystem : Swift.Hashable {}
extension CovantexSDK.EnvironmentFlagsDto.UsedPaymentSystem : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.UseCommuicationProviderType : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.UseCommuicationProviderType : Swift.Hashable {}
extension CovantexSDK.EnvironmentFlagsDto.UseCommuicationProviderType : Swift.RawRepresentable {}
extension CovantexSDK.EnvironmentFlagsDto.eAuthenticationType : Swift.Equatable {}
extension CovantexSDK.EnvironmentFlagsDto.eAuthenticationType : Swift.Hashable {}
extension CovantexSDK.FileDto.FileStoragePlace : Swift.Equatable {}
extension CovantexSDK.FileDto.FileStoragePlace : Swift.Hashable {}
extension CovantexSDK.FileDto.FileStoragePlace : Swift.RawRepresentable {}
extension CovantexSDK.FileDto.FileType : Swift.Equatable {}
extension CovantexSDK.FileDto.FileType : Swift.Hashable {}
extension CovantexSDK.FileDto.FileType : Swift.RawRepresentable {}
extension CovantexSDK.AuthenticationFactorRequestDto.AuthenticationFactorType : Swift.Equatable {}
extension CovantexSDK.AuthenticationFactorRequestDto.AuthenticationFactorType : Swift.Hashable {}
extension CovantexSDK.AuthenticationFactorRequestDto.AuthenticationFactorType : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.ConsultRequestTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterDto.ConsultRequestTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterDto.ConsultRequestTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.EncounterServiceTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterDto.EncounterServiceTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterDto.EncounterServiceTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.EncounterDto.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.EncounterDto.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.EncounterStatusId : Swift.Equatable {}
extension CovantexSDK.EncounterDto.EncounterStatusId : Swift.Hashable {}
extension CovantexSDK.EncounterDto.EncounterStatusId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.EncounterTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterDto.EncounterTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterDto.EncounterTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.ResellerServiceTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterDto.ResellerServiceTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterDto.ResellerServiceTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterDto.Symptoms : Swift.Equatable {}
extension CovantexSDK.EncounterDto.Symptoms : Swift.Hashable {}
extension CovantexSDK.EncounterDto.Symptoms : Swift.RawRepresentable {}
extension CovantexSDK.AllergyDto.SeverityLevel : Swift.Equatable {}
extension CovantexSDK.AllergyDto.SeverityLevel : Swift.Hashable {}
extension CovantexSDK.AllergyDto.SeverityLevel : Swift.RawRepresentable {}
extension CovantexSDK.AllergyDto.Type_ : Swift.Equatable {}
extension CovantexSDK.AllergyDto.Type_ : Swift.Hashable {}
extension CovantexSDK.AllergyDto.Type_ : Swift.RawRepresentable {}
extension CovantexSDK.TermsAndConditionsCaregiverDto.TypeId : Swift.Equatable {}
extension CovantexSDK.TermsAndConditionsCaregiverDto.TypeId : Swift.Hashable {}
extension CovantexSDK.TermsAndConditionsCaregiverDto.TypeId : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.notification_type : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.notification_type : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.notification_type : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.UserTo.ParticipantType : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.UserTo.ParticipantType : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.UserTo.ParticipantType : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.UserFrom.ParticipantType : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.UserFrom.ParticipantType : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.UserFrom.ParticipantType : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationType : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationType : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationType : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationEventStatus : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationEventStatus : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.Communication.CommunicationEventStatus : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.Communication.ProviderType : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.Communication.ProviderType : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.Communication.ProviderType : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.Encounter.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.Encounter.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.Encounter.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.NotificationDataHolder.CallStatus : Swift.Equatable {}
extension CovantexSDK.NotificationDataHolder.CallStatus : Swift.Hashable {}
extension CovantexSDK.NotificationDataHolder.CallStatus : Swift.RawRepresentable {}
extension CovantexSDK.TermsAndConditionsStatementDto.TypeId : Swift.Equatable {}
extension CovantexSDK.TermsAndConditionsStatementDto.TypeId : Swift.Hashable {}
extension CovantexSDK.TermsAndConditionsStatementDto.TypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderMedicalItemDto.MedicalItemType : Swift.Equatable {}
extension CovantexSDK.EncounterOrderMedicalItemDto.MedicalItemType : Swift.Hashable {}
extension CovantexSDK.EncounterOrderMedicalItemDto.MedicalItemType : Swift.RawRepresentable {}
extension CovantexSDK.PhysiciansService.baseUrl : Swift.Equatable {}
extension CovantexSDK.PhysiciansService.baseUrl : Swift.Hashable {}
extension CovantexSDK.XenditService.baseUrl : Swift.Equatable {}
extension CovantexSDK.XenditService.baseUrl : Swift.Hashable {}
extension CovantexSDK.EncounterStatusDto.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.EncounterStatusDto.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.EncounterStatusDto.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.ParticipantDto.CommunicationType : Swift.Equatable {}
extension CovantexSDK.ParticipantDto.CommunicationType : Swift.Hashable {}
extension CovantexSDK.ParticipantDto.CommunicationType : Swift.RawRepresentable {}
extension CovantexSDK.ParticipantDto.ParticipantStatus : Swift.Equatable {}
extension CovantexSDK.ParticipantDto.ParticipantStatus : Swift.Hashable {}
extension CovantexSDK.ParticipantDto.ParticipantStatus : Swift.RawRepresentable {}
extension CovantexSDK.ParticipantDto.CommunicationStatus : Swift.Equatable {}
extension CovantexSDK.ParticipantDto.CommunicationStatus : Swift.Hashable {}
extension CovantexSDK.ParticipantDto.CommunicationStatus : Swift.RawRepresentable {}
extension CovantexSDK.ParticipantDto.ProviderType : Swift.Equatable {}
extension CovantexSDK.ParticipantDto.ProviderType : Swift.Hashable {}
extension CovantexSDK.ParticipantDto.ProviderType : Swift.RawRepresentable {}
extension CovantexSDK.UserProfileDto.BestContactNumberId : Swift.Equatable {}
extension CovantexSDK.UserProfileDto.BestContactNumberId : Swift.Hashable {}
extension CovantexSDK.UserProfileDto.BestContactNumberId : Swift.RawRepresentable {}
extension CovantexSDK.UserProfileDto.UserStatusId : Swift.Equatable {}
extension CovantexSDK.UserProfileDto.UserStatusId : Swift.Hashable {}
extension CovantexSDK.UserProfileDto.UserStatusId : Swift.RawRepresentable {}
extension CovantexSDK.ConsultRequestDto.Status : Swift.Equatable {}
extension CovantexSDK.ConsultRequestDto.Status : Swift.Hashable {}
extension CovantexSDK.ConsultRequestDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.MhdDto.StatusId : Swift.Equatable {}
extension CovantexSDK.MhdDto.StatusId : Swift.Hashable {}
extension CovantexSDK.MhdDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.RxDto.Type_ : Swift.Equatable {}
extension CovantexSDK.RxDto.Type_ : Swift.Hashable {}
extension CovantexSDK.RxDto.Type_ : Swift.RawRepresentable {}
extension CovantexSDK.PatientPlanDto.StatusId : Swift.Equatable {}
extension CovantexSDK.PatientPlanDto.StatusId : Swift.Hashable {}
extension CovantexSDK.PatientPlanDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.PlanDto.PlanDurationTypeId : Swift.Equatable {}
extension CovantexSDK.PlanDto.PlanDurationTypeId : Swift.Hashable {}
extension CovantexSDK.PlanDto.PlanDurationTypeId : Swift.RawRepresentable {}
extension CovantexSDK.EncounterItemDto.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.EncounterItemDto.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.EncounterItemDto.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.LinkShortenerService.baseUrl : Swift.Equatable {}
extension CovantexSDK.LinkShortenerService.baseUrl : Swift.Hashable {}
extension CovantexSDK.PatientCouponDto.ECouponType : Swift.Equatable {}
extension CovantexSDK.PatientCouponDto.ECouponType : Swift.Hashable {}
extension CovantexSDK.PatientCouponDto.ECouponType : Swift.RawRepresentable {}
extension CovantexSDK.CaregiverDto.BestContactNumberId : Swift.Equatable {}
extension CovantexSDK.CaregiverDto.BestContactNumberId : Swift.Hashable {}
extension CovantexSDK.CaregiverDto.BestContactNumberId : Swift.RawRepresentable {}
extension CovantexSDK.CaregiverDto.StatusId : Swift.Equatable {}
extension CovantexSDK.CaregiverDto.StatusId : Swift.Hashable {}
extension CovantexSDK.CaregiverDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.MainService.baseUrl : Swift.Equatable {}
extension CovantexSDK.MainService.baseUrl : Swift.Hashable {}
extension CovantexSDK.APISettings.APIEnvironmentType : Swift.Equatable {}
extension CovantexSDK.APISettings.APIEnvironmentType : Swift.Hashable {}
extension CovantexSDK.APISettings.APIEnvironmentType : Swift.RawRepresentable {}
extension CovantexSDK.PatientInsuranceCompanyDto.InsuranceCompanyRoleId : Swift.Equatable {}
extension CovantexSDK.PatientInsuranceCompanyDto.InsuranceCompanyRoleId : Swift.Hashable {}
extension CovantexSDK.PatientInsuranceCompanyDto.InsuranceCompanyRoleId : Swift.RawRepresentable {}
extension CovantexSDK.PatientInsuranceCompanyDto.RelationshipToPatientId : Swift.Equatable {}
extension CovantexSDK.PatientInsuranceCompanyDto.RelationshipToPatientId : Swift.Hashable {}
extension CovantexSDK.PatientInsuranceCompanyDto.RelationshipToPatientId : Swift.RawRepresentable {}
extension CovantexSDK.AuthenticationFactorDto.Type_ : Swift.Equatable {}
extension CovantexSDK.AuthenticationFactorDto.Type_ : Swift.Hashable {}
extension CovantexSDK.AuthenticationFactorDto.Type_ : Swift.RawRepresentable {}
extension CovantexSDK.PaymentMethodDto.PaymentTypeId : Swift.Equatable {}
extension CovantexSDK.PaymentMethodDto.PaymentTypeId : Swift.Hashable {}
extension CovantexSDK.PaymentMethodDto.PaymentTypeId : Swift.RawRepresentable {}
extension CovantexSDK.StatusService.baseUrl : Swift.Equatable {}
extension CovantexSDK.StatusService.baseUrl : Swift.Hashable {}
extension CovantexSDK.InsuranceService.baseUrl : Swift.Equatable {}
extension CovantexSDK.InsuranceService.baseUrl : Swift.Hashable {}
extension CovantexSDK.XenditTokenDto.Status : Swift.Equatable {}
extension CovantexSDK.XenditTokenDto.Status : Swift.Hashable {}
extension CovantexSDK.XenditTokenDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.PaymentAuthorizationDto.PaymentAuthorizationStatusId : Swift.Equatable {}
extension CovantexSDK.PaymentAuthorizationDto.PaymentAuthorizationStatusId : Swift.Hashable {}
extension CovantexSDK.PaymentAuthorizationDto.PaymentAuthorizationStatusId : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.PatientLoginType : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.PatientLoginType : Swift.Hashable {}
extension CovantexSDK.ApplicationDto.PatientLoginType : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.OneTimePasswordSendingType : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.OneTimePasswordSendingType : Swift.Hashable {}
extension CovantexSDK.ApplicationDto.OneTimePasswordSendingType : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.eRegistrationType : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.eRegistrationType : Swift.Hashable {}
extension CovantexSDK.ApplicationDto.eRegistrationType : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.applicationStatus : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.applicationStatus : Swift.Hashable {}
extension CovantexSDK.ApplicationDto.applicationStatus : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.UsedPaymentSystem : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.UsedPaymentSystem : Swift.Hashable {}
extension CovantexSDK.ApplicationDto.UsedPaymentSystem : Swift.RawRepresentable {}
extension CovantexSDK.ApplicationDto.eAuthenticationType : Swift.Equatable {}
extension CovantexSDK.ApplicationDto.eAuthenticationType : Swift.Hashable {}
extension CovantexSDK.PreregistrationVerificationDto.AppProvider : Swift.Equatable {}
extension CovantexSDK.PreregistrationVerificationDto.AppProvider : Swift.Hashable {}
extension CovantexSDK.PreregistrationVerificationDto.AppProvider : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterOrderFileStatus : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterOrderFileStatus : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterOrderFileStatus : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterStatus : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterStatus : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileItemDto.EncounterStatus : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileItemDto.OrderStatus : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileItemDto.OrderStatus : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileItemDto.OrderStatus : Swift.RawRepresentable {}
extension CovantexSDK.EncounterOrderFileItemDto.ResellerServiceType : Swift.Equatable {}
extension CovantexSDK.EncounterOrderFileItemDto.ResellerServiceType : Swift.Hashable {}
extension CovantexSDK.EncounterOrderFileItemDto.ResellerServiceType : Swift.RawRepresentable {}
extension CovantexSDK.UserProfileFileDto.FileStoragePlace : Swift.Equatable {}
extension CovantexSDK.UserProfileFileDto.FileStoragePlace : Swift.Hashable {}
extension CovantexSDK.UserProfileFileDto.FileStoragePlace : Swift.RawRepresentable {}
extension CovantexSDK.UserProfileFileDto.FileType : Swift.Equatable {}
extension CovantexSDK.UserProfileFileDto.FileType : Swift.Hashable {}
extension CovantexSDK.UserProfileFileDto.FileType : Swift.RawRepresentable {}
extension CovantexSDK.API.APILogLevel : Swift.Equatable {}
extension CovantexSDK.API.APILogLevel : Swift.Hashable {}
extension CovantexSDK.EncounterFileDto.FileStoragePlace : Swift.Equatable {}
extension CovantexSDK.EncounterFileDto.FileStoragePlace : Swift.Hashable {}
extension CovantexSDK.EncounterFileDto.FileStoragePlace : Swift.RawRepresentable {}
extension CovantexSDK.EncounterFileDto.FileType : Swift.Equatable {}
extension CovantexSDK.EncounterFileDto.FileType : Swift.Hashable {}
extension CovantexSDK.EncounterFileDto.FileType : Swift.RawRepresentable {}
extension CovantexSDK.EncounterFileDto.Status : Swift.Equatable {}
extension CovantexSDK.EncounterFileDto.Status : Swift.Hashable {}
extension CovantexSDK.EncounterFileDto.Status : Swift.RawRepresentable {}
extension CovantexSDK.EncounterMeetingDto.MeetingTypeId : Swift.Equatable {}
extension CovantexSDK.EncounterMeetingDto.MeetingTypeId : Swift.Hashable {}
extension CovantexSDK.EncounterMeetingDto.MeetingTypeId : Swift.RawRepresentable {}
extension CovantexSDK.PharmacyStoreDto.OrganizationTypeId : Swift.Equatable {}
extension CovantexSDK.PharmacyStoreDto.OrganizationTypeId : Swift.Hashable {}
extension CovantexSDK.PharmacyStoreDto.OrganizationTypeId : Swift.RawRepresentable {}
extension CovantexSDK.MedicalReleaseDto.StatusId : Swift.Equatable {}
extension CovantexSDK.MedicalReleaseDto.StatusId : Swift.Hashable {}
extension CovantexSDK.MedicalReleaseDto.StatusId : Swift.RawRepresentable {}
extension CovantexSDK.ResellerServicePlanDto.ResellerServiceType : Swift.Equatable {}
extension CovantexSDK.ResellerServicePlanDto.ResellerServiceType : Swift.Hashable {}
extension CovantexSDK.ResellerServicePlanDto.ResellerServiceType : Swift.RawRepresentable {}
